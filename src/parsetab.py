
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHAR CR DO DOT DROP DUP ELSE EMIT IF ITERATOR LOOP MOD NUMBER ONEONE OPERATORS OVER ROT SPACES STRING SWAP THENstatement : expressions\n    expressions : expressions word\n                | word\n    \n    word    : function\n            | operator\n            | function_definition\n    function  : STRINGfunction_definition : ":" STRING operators ";"\n    operator    : aritmetic\n                | dot\n                | oneOne\n                | swap\n                | drop\n                | dup\n                | over\n                | rot\n                | print\n                | number\n                | condition\n    operator   : do\n    operators   : operators aritmetic\n                | operators dot\n                | operators oneOne\n                | operators swap\n                | operators drop\n                | operators dup\n                | operators over\n                | operators rot\n                | operators print\n                | operators number\n                | operators condition\n    operators   : operators do\n    operators   : aritmetic\n                | dot\n                | oneOne\n                | swap\n                | drop\n                | dup\n                | over\n                | rot\n                | print\n                | number\n                | condition\n    operators  : do\n    aritmetic   : OPERATORS\n                | MOD\n    print : DOTprint : EMITprint : CHARprint : SPACESprint : CRdup    : DUPcondition   : IfIf     : IF operators ElseIf     : IF ElseIf     : IF operators THENIf     : IF THENElse     : ELSE operators THENElse     : ELSE THEN\n    Iterator  : ITERATOR\n    \n    do_operators    : do_operators aritmetic\n                    | do_operators dot\n                    | do_operators oneOne\n                    | do_operators swap\n                    | do_operators drop\n                    | do_operators dup\n                    | do_operators over\n                    | do_operators rot\n                    | do_operators print\n                    | do_operators number\n                    | do_operators condition\n                    | do_operators do\n                    | do_operators Iterator\n    \n    do_operators    : aritmetic\n                    | dot\n                    | oneOne\n                    | swap\n                    | drop\n                    | dup\n                    | over\n                    | rot\n                    | print\n                    | number\n                    | condition\n                    | do\n                    | Iterator\n    do       : DO do_operators LOOP\n    oneOne   : ONEONE\n    drop : DROProt : ROTswap : SWAPover : OVERdot     : "."number   : NUMBER'
    
_lr_action_items = {'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,57,58,73,87,88,102,103,104,],[7,7,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,40,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,-2,-55,-57,-87,-54,-56,-59,-8,-58,]),':':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,57,58,73,87,88,102,103,104,],[20,20,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,-2,-55,-57,-87,-54,-56,-59,-8,-58,]),'OPERATORS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[21,21,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,21,21,-2,21,21,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,21,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,21,21,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,21,-59,-8,-58,]),'MOD':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[22,22,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,22,22,-2,22,22,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,22,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,22,22,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,22,-59,-8,-58,]),'.':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[23,23,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,23,23,-2,23,23,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,23,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,23,23,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,23,-59,-8,-58,]),'ONEONE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[24,24,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,24,24,-2,24,24,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,24,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,24,24,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,24,-59,-8,-58,]),'SWAP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[25,25,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,25,25,-2,25,25,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,25,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,25,25,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,25,-59,-8,-58,]),'DROP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[26,26,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,26,26,-2,26,26,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,26,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,26,26,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,26,-59,-8,-58,]),'DUP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[27,27,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,27,27,-2,27,27,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,27,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,27,27,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,27,-59,-8,-58,]),'OVER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[28,28,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,28,28,-2,28,28,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,28,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,28,28,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,28,-59,-8,-58,]),'ROT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[29,29,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,29,29,-2,29,29,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,29,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,29,29,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,29,-59,-8,-58,]),'DOT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[30,30,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,30,30,-2,30,30,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,30,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,30,30,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,30,-59,-8,-58,]),'EMIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[31,31,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,31,31,-2,31,31,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,31,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,31,31,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,31,-59,-8,-58,]),'CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[32,32,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,32,32,-2,32,32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,32,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,32,32,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,32,-59,-8,-58,]),'SPACES':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[33,33,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,33,33,-2,33,33,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,33,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,33,33,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,33,-59,-8,-58,]),'CR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[34,34,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,34,34,-2,34,34,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,34,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,34,34,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,34,-59,-8,-58,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[35,35,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,35,35,-2,35,35,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,35,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,35,35,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,35,-59,-8,-58,]),'DO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[37,37,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,37,37,-2,37,37,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,37,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,37,37,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,37,-59,-8,-58,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[38,38,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,38,38,-2,38,38,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,38,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,38,38,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,38,-59,-8,-58,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,57,58,73,87,88,102,103,104,],[0,-1,-3,-4,-5,-6,-7,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,-2,-55,-57,-87,-54,-56,-59,-8,-58,]),'LOOP':([21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,102,104,],[-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,-55,-57,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-59,-58,]),'ITERATOR':([21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,102,104,],[-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,55,55,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-60,-55,-57,-87,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-54,-56,-59,-58,]),'THEN':([21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,],[-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,58,88,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,102,-87,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,104,-59,-58,]),'ELSE':([21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,],[-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,71,71,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-87,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-59,-58,]),';':([21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,],[-45,-46,-93,-88,-91,-89,-52,-92,-90,-47,-48,-49,-50,-51,-94,-53,-55,-57,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,103,-87,-54,-56,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-59,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expressions':([0,],[2,]),'word':([0,2,],[3,39,]),'function':([0,2,],[4,4,]),'operator':([0,2,],[5,5,]),'function_definition':([0,2,],[6,6,]),'aritmetic':([0,2,37,38,40,41,56,71,72,101,],[8,8,42,59,59,74,89,59,89,89,]),'dot':([0,2,37,38,40,41,56,71,72,101,],[9,9,43,60,60,75,90,60,90,90,]),'oneOne':([0,2,37,38,40,41,56,71,72,101,],[10,10,44,61,61,76,91,61,91,91,]),'swap':([0,2,37,38,40,41,56,71,72,101,],[11,11,45,62,62,77,92,62,92,92,]),'drop':([0,2,37,38,40,41,56,71,72,101,],[12,12,46,63,63,78,93,63,93,93,]),'dup':([0,2,37,38,40,41,56,71,72,101,],[13,13,47,64,64,79,94,64,94,94,]),'over':([0,2,37,38,40,41,56,71,72,101,],[14,14,48,65,65,80,95,65,95,95,]),'rot':([0,2,37,38,40,41,56,71,72,101,],[15,15,49,66,66,81,96,66,96,96,]),'print':([0,2,37,38,40,41,56,71,72,101,],[16,16,50,67,67,82,97,67,97,97,]),'number':([0,2,37,38,40,41,56,71,72,101,],[17,17,51,68,68,83,98,68,98,98,]),'condition':([0,2,37,38,40,41,56,71,72,101,],[18,18,52,69,69,84,99,69,99,99,]),'do':([0,2,37,38,40,41,56,71,72,101,],[19,19,53,70,70,85,100,70,100,100,]),'If':([0,2,37,38,40,41,56,71,72,101,],[36,36,36,36,36,36,36,36,36,36,]),'do_operators':([37,],[41,]),'Iterator':([37,41,],[54,86,]),'operators':([38,40,71,],[56,72,101,]),'Else':([38,56,],[57,87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expressions','statement',1,'p_statement','parser.py',10),
  ('expressions -> expressions word','expressions',2,'p_expressions','parser.py',28),
  ('expressions -> word','expressions',1,'p_expressions','parser.py',29),
  ('word -> function','word',1,'p_word','parser.py',39),
  ('word -> operator','word',1,'p_word','parser.py',40),
  ('word -> function_definition','word',1,'p_word','parser.py',41),
  ('function -> STRING','function',1,'p_function','parser.py',47),
  ('function_definition -> : STRING operators ;','function_definition',4,'p_function_definition','parser.py',63),
  ('operator -> aritmetic','operator',1,'p_operator','parser.py',85),
  ('operator -> dot','operator',1,'p_operator','parser.py',86),
  ('operator -> oneOne','operator',1,'p_operator','parser.py',87),
  ('operator -> swap','operator',1,'p_operator','parser.py',88),
  ('operator -> drop','operator',1,'p_operator','parser.py',89),
  ('operator -> dup','operator',1,'p_operator','parser.py',90),
  ('operator -> over','operator',1,'p_operator','parser.py',91),
  ('operator -> rot','operator',1,'p_operator','parser.py',92),
  ('operator -> print','operator',1,'p_operator','parser.py',93),
  ('operator -> number','operator',1,'p_operator','parser.py',94),
  ('operator -> condition','operator',1,'p_operator','parser.py',95),
  ('operator -> do','operator',1,'p_operator_do','parser.py',105),
  ('operators -> operators aritmetic','operators',2,'p_operators_rec','parser.py',120),
  ('operators -> operators dot','operators',2,'p_operators_rec','parser.py',121),
  ('operators -> operators oneOne','operators',2,'p_operators_rec','parser.py',122),
  ('operators -> operators swap','operators',2,'p_operators_rec','parser.py',123),
  ('operators -> operators drop','operators',2,'p_operators_rec','parser.py',124),
  ('operators -> operators dup','operators',2,'p_operators_rec','parser.py',125),
  ('operators -> operators over','operators',2,'p_operators_rec','parser.py',126),
  ('operators -> operators rot','operators',2,'p_operators_rec','parser.py',127),
  ('operators -> operators print','operators',2,'p_operators_rec','parser.py',128),
  ('operators -> operators number','operators',2,'p_operators_rec','parser.py',129),
  ('operators -> operators condition','operators',2,'p_operators_rec','parser.py',130),
  ('operators -> operators do','operators',2,'p_operators_rec_do','parser.py',137),
  ('operators -> aritmetic','operators',1,'p_operators','parser.py',150),
  ('operators -> dot','operators',1,'p_operators','parser.py',151),
  ('operators -> oneOne','operators',1,'p_operators','parser.py',152),
  ('operators -> swap','operators',1,'p_operators','parser.py',153),
  ('operators -> drop','operators',1,'p_operators','parser.py',154),
  ('operators -> dup','operators',1,'p_operators','parser.py',155),
  ('operators -> over','operators',1,'p_operators','parser.py',156),
  ('operators -> rot','operators',1,'p_operators','parser.py',157),
  ('operators -> print','operators',1,'p_operators','parser.py',158),
  ('operators -> number','operators',1,'p_operators','parser.py',159),
  ('operators -> condition','operators',1,'p_operators','parser.py',160),
  ('operators -> do','operators',1,'p_operators_do','parser.py',166),
  ('aritmetic -> OPERATORS','aritmetic',1,'p_aritmetic','parser.py',179),
  ('aritmetic -> MOD','aritmetic',1,'p_aritmetic','parser.py',180),
  ('print -> DOT','print',1,'p_print_string','parser.py',206),
  ('print -> EMIT','print',1,'p_print_emit','parser.py',217),
  ('print -> CHAR','print',1,'p_print_char','parser.py',223),
  ('print -> SPACES','print',1,'p_print_spaces','parser.py',232),
  ('print -> CR','print',1,'p_print_cr','parser.py',240),
  ('dup -> DUP','dup',1,'p_res_dup','parser.py',246),
  ('condition -> If','condition',1,'p_cond','parser.py',256),
  ('If -> IF operators Else','If',3,'p_if1','parser.py',261),
  ('If -> IF Else','If',2,'p_if2','parser.py',277),
  ('If -> IF operators THEN','If',3,'p_if3','parser.py',286),
  ('If -> IF THEN','If',2,'p_if4','parser.py',299),
  ('Else -> ELSE operators THEN','Else',3,'p_else1','parser.py',304),
  ('Else -> ELSE THEN','Else',2,'p_else2','parser.py',311),
  ('Iterator -> ITERATOR','Iterator',1,'p_iterator','parser.py',318),
  ('do_operators -> do_operators aritmetic','do_operators',2,'p_do_operators','parser.py',329),
  ('do_operators -> do_operators dot','do_operators',2,'p_do_operators','parser.py',330),
  ('do_operators -> do_operators oneOne','do_operators',2,'p_do_operators','parser.py',331),
  ('do_operators -> do_operators swap','do_operators',2,'p_do_operators','parser.py',332),
  ('do_operators -> do_operators drop','do_operators',2,'p_do_operators','parser.py',333),
  ('do_operators -> do_operators dup','do_operators',2,'p_do_operators','parser.py',334),
  ('do_operators -> do_operators over','do_operators',2,'p_do_operators','parser.py',335),
  ('do_operators -> do_operators rot','do_operators',2,'p_do_operators','parser.py',336),
  ('do_operators -> do_operators print','do_operators',2,'p_do_operators','parser.py',337),
  ('do_operators -> do_operators number','do_operators',2,'p_do_operators','parser.py',338),
  ('do_operators -> do_operators condition','do_operators',2,'p_do_operators','parser.py',339),
  ('do_operators -> do_operators do','do_operators',2,'p_do_operators','parser.py',340),
  ('do_operators -> do_operators Iterator','do_operators',2,'p_do_operators','parser.py',341),
  ('do_operators -> aritmetic','do_operators',1,'p_do_ops1','parser.py',351),
  ('do_operators -> dot','do_operators',1,'p_do_ops1','parser.py',352),
  ('do_operators -> oneOne','do_operators',1,'p_do_ops1','parser.py',353),
  ('do_operators -> swap','do_operators',1,'p_do_ops1','parser.py',354),
  ('do_operators -> drop','do_operators',1,'p_do_ops1','parser.py',355),
  ('do_operators -> dup','do_operators',1,'p_do_ops1','parser.py',356),
  ('do_operators -> over','do_operators',1,'p_do_ops1','parser.py',357),
  ('do_operators -> rot','do_operators',1,'p_do_ops1','parser.py',358),
  ('do_operators -> print','do_operators',1,'p_do_ops1','parser.py',359),
  ('do_operators -> number','do_operators',1,'p_do_ops1','parser.py',360),
  ('do_operators -> condition','do_operators',1,'p_do_ops1','parser.py',361),
  ('do_operators -> do','do_operators',1,'p_do_ops1','parser.py',362),
  ('do_operators -> Iterator','do_operators',1,'p_do_ops1','parser.py',363),
  ('do -> DO do_operators LOOP','do',3,'p_do_while','parser.py',372),
  ('oneOne -> ONEONE','oneOne',1,'p_one_in_one_out','parser.py',406),
  ('drop -> DROP','drop',1,'p_drop','parser.py',420),
  ('rot -> ROT','rot',1,'p_rot','parser.py',430),
  ('swap -> SWAP','swap',1,'p_swap','parser.py',442),
  ('over -> OVER','over',1,'p_over','parser.py',458),
  ('dot -> .','dot',1,'p_res_print','parser.py',468),
  ('number -> NUMBER','number',1,'p_termo','parser.py',473),
]
