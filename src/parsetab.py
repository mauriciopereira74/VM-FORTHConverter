
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHAR CHARACTER COLON DIVIDE DOT DUP MINUS NUMBER PLUS SEMICOLON TIMES WORD\n    expression : statement\n               | word_def\n               | expression statement\n               | expression word_def\n               | char_expression\n               | expression char_expression\n    word_def : COLON WORD expression SEMICOLONstatement : NUMBERstatement : DUP\n    char_expression : CHAR CHARACTER\n    statement : WORD\n    statement : PLUS\n              | MINUS\n              | TIMES\n              | DIVIDE\n    statement : DOT'
    
_lr_action_items = {'NUMBER':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,],[5,5,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,5,-10,5,-7,]),'DUP':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,],[6,6,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,6,-10,6,-7,]),'WORD':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,],[7,7,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,18,-3,-4,-6,7,-10,7,-7,]),'PLUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,],[8,8,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,8,-10,8,-7,]),'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,],[9,9,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,9,-10,9,-7,]),'TIMES':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,],[10,10,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,10,-10,10,-7,]),'DIVIDE':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,],[11,11,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,11,-10,11,-7,]),'DOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,],[12,12,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,12,-10,12,-7,]),'COLON':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,],[13,13,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,13,-10,13,-7,]),'CHAR':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,],[14,14,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,14,-10,14,-7,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,19,21,],[0,-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,-10,-7,]),'SEMICOLON':([2,3,4,5,6,7,8,9,10,11,12,15,16,17,19,20,21,],[-1,-2,-5,-8,-9,-11,-12,-13,-14,-15,-16,-3,-4,-6,-10,21,-7,]),'CHARACTER':([14,],[19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,18,],[1,20,]),'statement':([0,1,18,20,],[2,15,2,15,]),'word_def':([0,1,18,20,],[3,16,3,16,]),'char_expression':([0,1,18,20,],[4,17,4,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> statement','expression',1,'p_expression','parserr.py',11),
  ('expression -> word_def','expression',1,'p_expression','parserr.py',12),
  ('expression -> expression statement','expression',2,'p_expression','parserr.py',13),
  ('expression -> expression word_def','expression',2,'p_expression','parserr.py',14),
  ('expression -> char_expression','expression',1,'p_expression','parserr.py',15),
  ('expression -> expression char_expression','expression',2,'p_expression','parserr.py',16),
  ('word_def -> COLON WORD expression SEMICOLON','word_def',4,'p_word_def','parserr.py',21),
  ('statement -> NUMBER','statement',1,'p_statement_number','parserr.py',26),
  ('statement -> DUP','statement',1,'p_statement_dup','parserr.py',30),
  ('char_expression -> CHAR CHARACTER','char_expression',2,'p_char_expression','parserr.py',34),
  ('statement -> WORD','statement',1,'p_statement_word','parserr.py',40),
  ('statement -> PLUS','statement',1,'p_statement_operator','parserr.py',50),
  ('statement -> MINUS','statement',1,'p_statement_operator','parserr.py',51),
  ('statement -> TIMES','statement',1,'p_statement_operator','parserr.py',52),
  ('statement -> DIVIDE','statement',1,'p_statement_operator','parserr.py',53),
  ('statement -> DOT','statement',1,'p_statement_output','parserr.py',59),
]
