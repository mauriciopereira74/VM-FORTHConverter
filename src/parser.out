Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expressions
Rule 2     expressions -> expressions word
Rule 3     expressions -> word
Rule 4     word -> function
Rule 5     word -> operator
Rule 6     word -> function_definition
Rule 7     function -> STRING
Rule 8     function_definition -> : STRING operators ;
Rule 9     operator -> aritmetic
Rule 10    operator -> dot
Rule 11    operator -> oneOne
Rule 12    operator -> swap
Rule 13    operator -> drop
Rule 14    operator -> dup
Rule 15    operator -> over
Rule 16    operator -> rot
Rule 17    operator -> print
Rule 18    operator -> number
Rule 19    operator -> condition
Rule 20    operator -> do
Rule 21    operators -> operators aritmetic
Rule 22    operators -> operators dot
Rule 23    operators -> operators oneOne
Rule 24    operators -> operators swap
Rule 25    operators -> operators drop
Rule 26    operators -> operators dup
Rule 27    operators -> operators over
Rule 28    operators -> operators rot
Rule 29    operators -> operators print
Rule 30    operators -> operators number
Rule 31    operators -> operators condition
Rule 32    operators -> operators do
Rule 33    operators -> aritmetic
Rule 34    operators -> dot
Rule 35    operators -> oneOne
Rule 36    operators -> swap
Rule 37    operators -> drop
Rule 38    operators -> dup
Rule 39    operators -> over
Rule 40    operators -> rot
Rule 41    operators -> print
Rule 42    operators -> number
Rule 43    operators -> condition
Rule 44    operators -> do
Rule 45    aritmetic -> OPERATORS
Rule 46    aritmetic -> MOD
Rule 47    print -> DOT
Rule 48    print -> EMIT
Rule 49    print -> CHAR
Rule 50    print -> SPACES
Rule 51    print -> CR
Rule 52    dup -> DUP
Rule 53    condition -> If
Rule 54    If -> IF operators Else
Rule 55    If -> IF Else
Rule 56    If -> IF operators THEN
Rule 57    If -> IF THEN
Rule 58    Else -> ELSE operators THEN
Rule 59    Else -> ELSE THEN
Rule 60    Iterator -> ITERATOR
Rule 61    do_operators -> do_operators aritmetic
Rule 62    do_operators -> do_operators dot
Rule 63    do_operators -> do_operators oneOne
Rule 64    do_operators -> do_operators swap
Rule 65    do_operators -> do_operators drop
Rule 66    do_operators -> do_operators dup
Rule 67    do_operators -> do_operators over
Rule 68    do_operators -> do_operators rot
Rule 69    do_operators -> do_operators print
Rule 70    do_operators -> do_operators number
Rule 71    do_operators -> do_operators condition
Rule 72    do_operators -> do_operators do
Rule 73    do_operators -> do_operators Iterator
Rule 74    do_operators -> aritmetic
Rule 75    do_operators -> dot
Rule 76    do_operators -> oneOne
Rule 77    do_operators -> swap
Rule 78    do_operators -> drop
Rule 79    do_operators -> dup
Rule 80    do_operators -> over
Rule 81    do_operators -> rot
Rule 82    do_operators -> print
Rule 83    do_operators -> number
Rule 84    do_operators -> condition
Rule 85    do_operators -> do
Rule 86    do_operators -> Iterator
Rule 87    do -> DO do_operators LOOP
Rule 88    oneOne -> ONEONE
Rule 89    drop -> DROP
Rule 90    rot -> ROT
Rule 91    swap -> SWAP
Rule 92    over -> OVER
Rule 93    dot -> .
Rule 94    number -> NUMBER

Terminals, with rules where they appear

.                    : 93
:                    : 8
;                    : 8
CHAR                 : 49
CR                   : 51
DO                   : 87
DOT                  : 47
DROP                 : 89
DUP                  : 52
ELSE                 : 58 59
EMIT                 : 48
IF                   : 54 55 56 57
ITERATOR             : 60
LOOP                 : 87
MOD                  : 46
NUMBER               : 94
ONEONE               : 88
OPERATORS            : 45
OVER                 : 92
ROT                  : 90
SPACES               : 50
STRING               : 7 8
SWAP                 : 91
THEN                 : 56 57 58 59
error                : 

Nonterminals, with rules where they appear

Else                 : 54 55
If                   : 53
Iterator             : 73 86
aritmetic            : 9 21 33 61 74
condition            : 19 31 43 71 84
do                   : 20 32 44 72 85
do_operators         : 61 62 63 64 65 66 67 68 69 70 71 72 73 87
dot                  : 10 22 34 62 75
drop                 : 13 25 37 65 78
dup                  : 14 26 38 66 79
expressions          : 1 2
function             : 4
function_definition  : 6
number               : 18 30 42 70 83
oneOne               : 11 23 35 63 76
operator             : 5
operators            : 8 21 22 23 24 25 26 27 28 29 30 31 32 54 56 58
over                 : 15 27 39 67 80
print                : 17 29 41 69 82
rot                  : 16 28 40 68 81
statement            : 0
swap                 : 12 24 36 64 77
word                 : 2 3

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expressions
    (2) expressions -> . expressions word
    (3) expressions -> . word
    (4) word -> . function
    (5) word -> . operator
    (6) word -> . function_definition
    (7) function -> . STRING
    (9) operator -> . aritmetic
    (10) operator -> . dot
    (11) operator -> . oneOne
    (12) operator -> . swap
    (13) operator -> . drop
    (14) operator -> . dup
    (15) operator -> . over
    (16) operator -> . rot
    (17) operator -> . print
    (18) operator -> . number
    (19) operator -> . condition
    (20) operator -> . do
    (8) function_definition -> . : STRING operators ;
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    STRING          shift and go to state 7
    :               shift and go to state 20
    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    IF              shift and go to state 38

    statement                      shift and go to state 1
    expressions                    shift and go to state 2
    word                           shift and go to state 3
    function                       shift and go to state 4
    operator                       shift and go to state 5
    function_definition            shift and go to state 6
    aritmetic                      shift and go to state 8
    dot                            shift and go to state 9
    oneOne                         shift and go to state 10
    swap                           shift and go to state 11
    drop                           shift and go to state 12
    dup                            shift and go to state 13
    over                           shift and go to state 14
    rot                            shift and go to state 15
    print                          shift and go to state 16
    number                         shift and go to state 17
    condition                      shift and go to state 18
    do                             shift and go to state 19
    If                             shift and go to state 36

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expressions .
    (2) expressions -> expressions . word
    (4) word -> . function
    (5) word -> . operator
    (6) word -> . function_definition
    (7) function -> . STRING
    (9) operator -> . aritmetic
    (10) operator -> . dot
    (11) operator -> . oneOne
    (12) operator -> . swap
    (13) operator -> . drop
    (14) operator -> . dup
    (15) operator -> . over
    (16) operator -> . rot
    (17) operator -> . print
    (18) operator -> . number
    (19) operator -> . condition
    (20) operator -> . do
    (8) function_definition -> . : STRING operators ;
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    $end            reduce using rule 1 (statement -> expressions .)
    STRING          shift and go to state 7
    :               shift and go to state 20
    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    IF              shift and go to state 38

    word                           shift and go to state 39
    function                       shift and go to state 4
    operator                       shift and go to state 5
    function_definition            shift and go to state 6
    aritmetic                      shift and go to state 8
    dot                            shift and go to state 9
    oneOne                         shift and go to state 10
    swap                           shift and go to state 11
    drop                           shift and go to state 12
    dup                            shift and go to state 13
    over                           shift and go to state 14
    rot                            shift and go to state 15
    print                          shift and go to state 16
    number                         shift and go to state 17
    condition                      shift and go to state 18
    do                             shift and go to state 19
    If                             shift and go to state 36

state 3

    (3) expressions -> word .

    STRING          reduce using rule 3 (expressions -> word .)
    :               reduce using rule 3 (expressions -> word .)
    OPERATORS       reduce using rule 3 (expressions -> word .)
    MOD             reduce using rule 3 (expressions -> word .)
    .               reduce using rule 3 (expressions -> word .)
    ONEONE          reduce using rule 3 (expressions -> word .)
    SWAP            reduce using rule 3 (expressions -> word .)
    DROP            reduce using rule 3 (expressions -> word .)
    DUP             reduce using rule 3 (expressions -> word .)
    OVER            reduce using rule 3 (expressions -> word .)
    ROT             reduce using rule 3 (expressions -> word .)
    DOT             reduce using rule 3 (expressions -> word .)
    EMIT            reduce using rule 3 (expressions -> word .)
    CHAR            reduce using rule 3 (expressions -> word .)
    SPACES          reduce using rule 3 (expressions -> word .)
    CR              reduce using rule 3 (expressions -> word .)
    NUMBER          reduce using rule 3 (expressions -> word .)
    DO              reduce using rule 3 (expressions -> word .)
    IF              reduce using rule 3 (expressions -> word .)
    $end            reduce using rule 3 (expressions -> word .)


state 4

    (4) word -> function .

    STRING          reduce using rule 4 (word -> function .)
    :               reduce using rule 4 (word -> function .)
    OPERATORS       reduce using rule 4 (word -> function .)
    MOD             reduce using rule 4 (word -> function .)
    .               reduce using rule 4 (word -> function .)
    ONEONE          reduce using rule 4 (word -> function .)
    SWAP            reduce using rule 4 (word -> function .)
    DROP            reduce using rule 4 (word -> function .)
    DUP             reduce using rule 4 (word -> function .)
    OVER            reduce using rule 4 (word -> function .)
    ROT             reduce using rule 4 (word -> function .)
    DOT             reduce using rule 4 (word -> function .)
    EMIT            reduce using rule 4 (word -> function .)
    CHAR            reduce using rule 4 (word -> function .)
    SPACES          reduce using rule 4 (word -> function .)
    CR              reduce using rule 4 (word -> function .)
    NUMBER          reduce using rule 4 (word -> function .)
    DO              reduce using rule 4 (word -> function .)
    IF              reduce using rule 4 (word -> function .)
    $end            reduce using rule 4 (word -> function .)


state 5

    (5) word -> operator .

    STRING          reduce using rule 5 (word -> operator .)
    :               reduce using rule 5 (word -> operator .)
    OPERATORS       reduce using rule 5 (word -> operator .)
    MOD             reduce using rule 5 (word -> operator .)
    .               reduce using rule 5 (word -> operator .)
    ONEONE          reduce using rule 5 (word -> operator .)
    SWAP            reduce using rule 5 (word -> operator .)
    DROP            reduce using rule 5 (word -> operator .)
    DUP             reduce using rule 5 (word -> operator .)
    OVER            reduce using rule 5 (word -> operator .)
    ROT             reduce using rule 5 (word -> operator .)
    DOT             reduce using rule 5 (word -> operator .)
    EMIT            reduce using rule 5 (word -> operator .)
    CHAR            reduce using rule 5 (word -> operator .)
    SPACES          reduce using rule 5 (word -> operator .)
    CR              reduce using rule 5 (word -> operator .)
    NUMBER          reduce using rule 5 (word -> operator .)
    DO              reduce using rule 5 (word -> operator .)
    IF              reduce using rule 5 (word -> operator .)
    $end            reduce using rule 5 (word -> operator .)


state 6

    (6) word -> function_definition .

    STRING          reduce using rule 6 (word -> function_definition .)
    :               reduce using rule 6 (word -> function_definition .)
    OPERATORS       reduce using rule 6 (word -> function_definition .)
    MOD             reduce using rule 6 (word -> function_definition .)
    .               reduce using rule 6 (word -> function_definition .)
    ONEONE          reduce using rule 6 (word -> function_definition .)
    SWAP            reduce using rule 6 (word -> function_definition .)
    DROP            reduce using rule 6 (word -> function_definition .)
    DUP             reduce using rule 6 (word -> function_definition .)
    OVER            reduce using rule 6 (word -> function_definition .)
    ROT             reduce using rule 6 (word -> function_definition .)
    DOT             reduce using rule 6 (word -> function_definition .)
    EMIT            reduce using rule 6 (word -> function_definition .)
    CHAR            reduce using rule 6 (word -> function_definition .)
    SPACES          reduce using rule 6 (word -> function_definition .)
    CR              reduce using rule 6 (word -> function_definition .)
    NUMBER          reduce using rule 6 (word -> function_definition .)
    DO              reduce using rule 6 (word -> function_definition .)
    IF              reduce using rule 6 (word -> function_definition .)
    $end            reduce using rule 6 (word -> function_definition .)


state 7

    (7) function -> STRING .

    STRING          reduce using rule 7 (function -> STRING .)
    :               reduce using rule 7 (function -> STRING .)
    OPERATORS       reduce using rule 7 (function -> STRING .)
    MOD             reduce using rule 7 (function -> STRING .)
    .               reduce using rule 7 (function -> STRING .)
    ONEONE          reduce using rule 7 (function -> STRING .)
    SWAP            reduce using rule 7 (function -> STRING .)
    DROP            reduce using rule 7 (function -> STRING .)
    DUP             reduce using rule 7 (function -> STRING .)
    OVER            reduce using rule 7 (function -> STRING .)
    ROT             reduce using rule 7 (function -> STRING .)
    DOT             reduce using rule 7 (function -> STRING .)
    EMIT            reduce using rule 7 (function -> STRING .)
    CHAR            reduce using rule 7 (function -> STRING .)
    SPACES          reduce using rule 7 (function -> STRING .)
    CR              reduce using rule 7 (function -> STRING .)
    NUMBER          reduce using rule 7 (function -> STRING .)
    DO              reduce using rule 7 (function -> STRING .)
    IF              reduce using rule 7 (function -> STRING .)
    $end            reduce using rule 7 (function -> STRING .)


state 8

    (9) operator -> aritmetic .

    STRING          reduce using rule 9 (operator -> aritmetic .)
    :               reduce using rule 9 (operator -> aritmetic .)
    OPERATORS       reduce using rule 9 (operator -> aritmetic .)
    MOD             reduce using rule 9 (operator -> aritmetic .)
    .               reduce using rule 9 (operator -> aritmetic .)
    ONEONE          reduce using rule 9 (operator -> aritmetic .)
    SWAP            reduce using rule 9 (operator -> aritmetic .)
    DROP            reduce using rule 9 (operator -> aritmetic .)
    DUP             reduce using rule 9 (operator -> aritmetic .)
    OVER            reduce using rule 9 (operator -> aritmetic .)
    ROT             reduce using rule 9 (operator -> aritmetic .)
    DOT             reduce using rule 9 (operator -> aritmetic .)
    EMIT            reduce using rule 9 (operator -> aritmetic .)
    CHAR            reduce using rule 9 (operator -> aritmetic .)
    SPACES          reduce using rule 9 (operator -> aritmetic .)
    CR              reduce using rule 9 (operator -> aritmetic .)
    NUMBER          reduce using rule 9 (operator -> aritmetic .)
    DO              reduce using rule 9 (operator -> aritmetic .)
    IF              reduce using rule 9 (operator -> aritmetic .)
    $end            reduce using rule 9 (operator -> aritmetic .)


state 9

    (10) operator -> dot .

    STRING          reduce using rule 10 (operator -> dot .)
    :               reduce using rule 10 (operator -> dot .)
    OPERATORS       reduce using rule 10 (operator -> dot .)
    MOD             reduce using rule 10 (operator -> dot .)
    .               reduce using rule 10 (operator -> dot .)
    ONEONE          reduce using rule 10 (operator -> dot .)
    SWAP            reduce using rule 10 (operator -> dot .)
    DROP            reduce using rule 10 (operator -> dot .)
    DUP             reduce using rule 10 (operator -> dot .)
    OVER            reduce using rule 10 (operator -> dot .)
    ROT             reduce using rule 10 (operator -> dot .)
    DOT             reduce using rule 10 (operator -> dot .)
    EMIT            reduce using rule 10 (operator -> dot .)
    CHAR            reduce using rule 10 (operator -> dot .)
    SPACES          reduce using rule 10 (operator -> dot .)
    CR              reduce using rule 10 (operator -> dot .)
    NUMBER          reduce using rule 10 (operator -> dot .)
    DO              reduce using rule 10 (operator -> dot .)
    IF              reduce using rule 10 (operator -> dot .)
    $end            reduce using rule 10 (operator -> dot .)


state 10

    (11) operator -> oneOne .

    STRING          reduce using rule 11 (operator -> oneOne .)
    :               reduce using rule 11 (operator -> oneOne .)
    OPERATORS       reduce using rule 11 (operator -> oneOne .)
    MOD             reduce using rule 11 (operator -> oneOne .)
    .               reduce using rule 11 (operator -> oneOne .)
    ONEONE          reduce using rule 11 (operator -> oneOne .)
    SWAP            reduce using rule 11 (operator -> oneOne .)
    DROP            reduce using rule 11 (operator -> oneOne .)
    DUP             reduce using rule 11 (operator -> oneOne .)
    OVER            reduce using rule 11 (operator -> oneOne .)
    ROT             reduce using rule 11 (operator -> oneOne .)
    DOT             reduce using rule 11 (operator -> oneOne .)
    EMIT            reduce using rule 11 (operator -> oneOne .)
    CHAR            reduce using rule 11 (operator -> oneOne .)
    SPACES          reduce using rule 11 (operator -> oneOne .)
    CR              reduce using rule 11 (operator -> oneOne .)
    NUMBER          reduce using rule 11 (operator -> oneOne .)
    DO              reduce using rule 11 (operator -> oneOne .)
    IF              reduce using rule 11 (operator -> oneOne .)
    $end            reduce using rule 11 (operator -> oneOne .)


state 11

    (12) operator -> swap .

    STRING          reduce using rule 12 (operator -> swap .)
    :               reduce using rule 12 (operator -> swap .)
    OPERATORS       reduce using rule 12 (operator -> swap .)
    MOD             reduce using rule 12 (operator -> swap .)
    .               reduce using rule 12 (operator -> swap .)
    ONEONE          reduce using rule 12 (operator -> swap .)
    SWAP            reduce using rule 12 (operator -> swap .)
    DROP            reduce using rule 12 (operator -> swap .)
    DUP             reduce using rule 12 (operator -> swap .)
    OVER            reduce using rule 12 (operator -> swap .)
    ROT             reduce using rule 12 (operator -> swap .)
    DOT             reduce using rule 12 (operator -> swap .)
    EMIT            reduce using rule 12 (operator -> swap .)
    CHAR            reduce using rule 12 (operator -> swap .)
    SPACES          reduce using rule 12 (operator -> swap .)
    CR              reduce using rule 12 (operator -> swap .)
    NUMBER          reduce using rule 12 (operator -> swap .)
    DO              reduce using rule 12 (operator -> swap .)
    IF              reduce using rule 12 (operator -> swap .)
    $end            reduce using rule 12 (operator -> swap .)


state 12

    (13) operator -> drop .

    STRING          reduce using rule 13 (operator -> drop .)
    :               reduce using rule 13 (operator -> drop .)
    OPERATORS       reduce using rule 13 (operator -> drop .)
    MOD             reduce using rule 13 (operator -> drop .)
    .               reduce using rule 13 (operator -> drop .)
    ONEONE          reduce using rule 13 (operator -> drop .)
    SWAP            reduce using rule 13 (operator -> drop .)
    DROP            reduce using rule 13 (operator -> drop .)
    DUP             reduce using rule 13 (operator -> drop .)
    OVER            reduce using rule 13 (operator -> drop .)
    ROT             reduce using rule 13 (operator -> drop .)
    DOT             reduce using rule 13 (operator -> drop .)
    EMIT            reduce using rule 13 (operator -> drop .)
    CHAR            reduce using rule 13 (operator -> drop .)
    SPACES          reduce using rule 13 (operator -> drop .)
    CR              reduce using rule 13 (operator -> drop .)
    NUMBER          reduce using rule 13 (operator -> drop .)
    DO              reduce using rule 13 (operator -> drop .)
    IF              reduce using rule 13 (operator -> drop .)
    $end            reduce using rule 13 (operator -> drop .)


state 13

    (14) operator -> dup .

    STRING          reduce using rule 14 (operator -> dup .)
    :               reduce using rule 14 (operator -> dup .)
    OPERATORS       reduce using rule 14 (operator -> dup .)
    MOD             reduce using rule 14 (operator -> dup .)
    .               reduce using rule 14 (operator -> dup .)
    ONEONE          reduce using rule 14 (operator -> dup .)
    SWAP            reduce using rule 14 (operator -> dup .)
    DROP            reduce using rule 14 (operator -> dup .)
    DUP             reduce using rule 14 (operator -> dup .)
    OVER            reduce using rule 14 (operator -> dup .)
    ROT             reduce using rule 14 (operator -> dup .)
    DOT             reduce using rule 14 (operator -> dup .)
    EMIT            reduce using rule 14 (operator -> dup .)
    CHAR            reduce using rule 14 (operator -> dup .)
    SPACES          reduce using rule 14 (operator -> dup .)
    CR              reduce using rule 14 (operator -> dup .)
    NUMBER          reduce using rule 14 (operator -> dup .)
    DO              reduce using rule 14 (operator -> dup .)
    IF              reduce using rule 14 (operator -> dup .)
    $end            reduce using rule 14 (operator -> dup .)


state 14

    (15) operator -> over .

    STRING          reduce using rule 15 (operator -> over .)
    :               reduce using rule 15 (operator -> over .)
    OPERATORS       reduce using rule 15 (operator -> over .)
    MOD             reduce using rule 15 (operator -> over .)
    .               reduce using rule 15 (operator -> over .)
    ONEONE          reduce using rule 15 (operator -> over .)
    SWAP            reduce using rule 15 (operator -> over .)
    DROP            reduce using rule 15 (operator -> over .)
    DUP             reduce using rule 15 (operator -> over .)
    OVER            reduce using rule 15 (operator -> over .)
    ROT             reduce using rule 15 (operator -> over .)
    DOT             reduce using rule 15 (operator -> over .)
    EMIT            reduce using rule 15 (operator -> over .)
    CHAR            reduce using rule 15 (operator -> over .)
    SPACES          reduce using rule 15 (operator -> over .)
    CR              reduce using rule 15 (operator -> over .)
    NUMBER          reduce using rule 15 (operator -> over .)
    DO              reduce using rule 15 (operator -> over .)
    IF              reduce using rule 15 (operator -> over .)
    $end            reduce using rule 15 (operator -> over .)


state 15

    (16) operator -> rot .

    STRING          reduce using rule 16 (operator -> rot .)
    :               reduce using rule 16 (operator -> rot .)
    OPERATORS       reduce using rule 16 (operator -> rot .)
    MOD             reduce using rule 16 (operator -> rot .)
    .               reduce using rule 16 (operator -> rot .)
    ONEONE          reduce using rule 16 (operator -> rot .)
    SWAP            reduce using rule 16 (operator -> rot .)
    DROP            reduce using rule 16 (operator -> rot .)
    DUP             reduce using rule 16 (operator -> rot .)
    OVER            reduce using rule 16 (operator -> rot .)
    ROT             reduce using rule 16 (operator -> rot .)
    DOT             reduce using rule 16 (operator -> rot .)
    EMIT            reduce using rule 16 (operator -> rot .)
    CHAR            reduce using rule 16 (operator -> rot .)
    SPACES          reduce using rule 16 (operator -> rot .)
    CR              reduce using rule 16 (operator -> rot .)
    NUMBER          reduce using rule 16 (operator -> rot .)
    DO              reduce using rule 16 (operator -> rot .)
    IF              reduce using rule 16 (operator -> rot .)
    $end            reduce using rule 16 (operator -> rot .)


state 16

    (17) operator -> print .

    STRING          reduce using rule 17 (operator -> print .)
    :               reduce using rule 17 (operator -> print .)
    OPERATORS       reduce using rule 17 (operator -> print .)
    MOD             reduce using rule 17 (operator -> print .)
    .               reduce using rule 17 (operator -> print .)
    ONEONE          reduce using rule 17 (operator -> print .)
    SWAP            reduce using rule 17 (operator -> print .)
    DROP            reduce using rule 17 (operator -> print .)
    DUP             reduce using rule 17 (operator -> print .)
    OVER            reduce using rule 17 (operator -> print .)
    ROT             reduce using rule 17 (operator -> print .)
    DOT             reduce using rule 17 (operator -> print .)
    EMIT            reduce using rule 17 (operator -> print .)
    CHAR            reduce using rule 17 (operator -> print .)
    SPACES          reduce using rule 17 (operator -> print .)
    CR              reduce using rule 17 (operator -> print .)
    NUMBER          reduce using rule 17 (operator -> print .)
    DO              reduce using rule 17 (operator -> print .)
    IF              reduce using rule 17 (operator -> print .)
    $end            reduce using rule 17 (operator -> print .)


state 17

    (18) operator -> number .

    STRING          reduce using rule 18 (operator -> number .)
    :               reduce using rule 18 (operator -> number .)
    OPERATORS       reduce using rule 18 (operator -> number .)
    MOD             reduce using rule 18 (operator -> number .)
    .               reduce using rule 18 (operator -> number .)
    ONEONE          reduce using rule 18 (operator -> number .)
    SWAP            reduce using rule 18 (operator -> number .)
    DROP            reduce using rule 18 (operator -> number .)
    DUP             reduce using rule 18 (operator -> number .)
    OVER            reduce using rule 18 (operator -> number .)
    ROT             reduce using rule 18 (operator -> number .)
    DOT             reduce using rule 18 (operator -> number .)
    EMIT            reduce using rule 18 (operator -> number .)
    CHAR            reduce using rule 18 (operator -> number .)
    SPACES          reduce using rule 18 (operator -> number .)
    CR              reduce using rule 18 (operator -> number .)
    NUMBER          reduce using rule 18 (operator -> number .)
    DO              reduce using rule 18 (operator -> number .)
    IF              reduce using rule 18 (operator -> number .)
    $end            reduce using rule 18 (operator -> number .)


state 18

    (19) operator -> condition .

    STRING          reduce using rule 19 (operator -> condition .)
    :               reduce using rule 19 (operator -> condition .)
    OPERATORS       reduce using rule 19 (operator -> condition .)
    MOD             reduce using rule 19 (operator -> condition .)
    .               reduce using rule 19 (operator -> condition .)
    ONEONE          reduce using rule 19 (operator -> condition .)
    SWAP            reduce using rule 19 (operator -> condition .)
    DROP            reduce using rule 19 (operator -> condition .)
    DUP             reduce using rule 19 (operator -> condition .)
    OVER            reduce using rule 19 (operator -> condition .)
    ROT             reduce using rule 19 (operator -> condition .)
    DOT             reduce using rule 19 (operator -> condition .)
    EMIT            reduce using rule 19 (operator -> condition .)
    CHAR            reduce using rule 19 (operator -> condition .)
    SPACES          reduce using rule 19 (operator -> condition .)
    CR              reduce using rule 19 (operator -> condition .)
    NUMBER          reduce using rule 19 (operator -> condition .)
    DO              reduce using rule 19 (operator -> condition .)
    IF              reduce using rule 19 (operator -> condition .)
    $end            reduce using rule 19 (operator -> condition .)


state 19

    (20) operator -> do .

    STRING          reduce using rule 20 (operator -> do .)
    :               reduce using rule 20 (operator -> do .)
    OPERATORS       reduce using rule 20 (operator -> do .)
    MOD             reduce using rule 20 (operator -> do .)
    .               reduce using rule 20 (operator -> do .)
    ONEONE          reduce using rule 20 (operator -> do .)
    SWAP            reduce using rule 20 (operator -> do .)
    DROP            reduce using rule 20 (operator -> do .)
    DUP             reduce using rule 20 (operator -> do .)
    OVER            reduce using rule 20 (operator -> do .)
    ROT             reduce using rule 20 (operator -> do .)
    DOT             reduce using rule 20 (operator -> do .)
    EMIT            reduce using rule 20 (operator -> do .)
    CHAR            reduce using rule 20 (operator -> do .)
    SPACES          reduce using rule 20 (operator -> do .)
    CR              reduce using rule 20 (operator -> do .)
    NUMBER          reduce using rule 20 (operator -> do .)
    DO              reduce using rule 20 (operator -> do .)
    IF              reduce using rule 20 (operator -> do .)
    $end            reduce using rule 20 (operator -> do .)


state 20

    (8) function_definition -> : . STRING operators ;

    STRING          shift and go to state 40


state 21

    (45) aritmetic -> OPERATORS .

    STRING          reduce using rule 45 (aritmetic -> OPERATORS .)
    :               reduce using rule 45 (aritmetic -> OPERATORS .)
    OPERATORS       reduce using rule 45 (aritmetic -> OPERATORS .)
    MOD             reduce using rule 45 (aritmetic -> OPERATORS .)
    .               reduce using rule 45 (aritmetic -> OPERATORS .)
    ONEONE          reduce using rule 45 (aritmetic -> OPERATORS .)
    SWAP            reduce using rule 45 (aritmetic -> OPERATORS .)
    DROP            reduce using rule 45 (aritmetic -> OPERATORS .)
    DUP             reduce using rule 45 (aritmetic -> OPERATORS .)
    OVER            reduce using rule 45 (aritmetic -> OPERATORS .)
    ROT             reduce using rule 45 (aritmetic -> OPERATORS .)
    DOT             reduce using rule 45 (aritmetic -> OPERATORS .)
    EMIT            reduce using rule 45 (aritmetic -> OPERATORS .)
    CHAR            reduce using rule 45 (aritmetic -> OPERATORS .)
    SPACES          reduce using rule 45 (aritmetic -> OPERATORS .)
    CR              reduce using rule 45 (aritmetic -> OPERATORS .)
    NUMBER          reduce using rule 45 (aritmetic -> OPERATORS .)
    DO              reduce using rule 45 (aritmetic -> OPERATORS .)
    IF              reduce using rule 45 (aritmetic -> OPERATORS .)
    $end            reduce using rule 45 (aritmetic -> OPERATORS .)
    LOOP            reduce using rule 45 (aritmetic -> OPERATORS .)
    ITERATOR        reduce using rule 45 (aritmetic -> OPERATORS .)
    THEN            reduce using rule 45 (aritmetic -> OPERATORS .)
    ELSE            reduce using rule 45 (aritmetic -> OPERATORS .)
    ;               reduce using rule 45 (aritmetic -> OPERATORS .)


state 22

    (46) aritmetic -> MOD .

    STRING          reduce using rule 46 (aritmetic -> MOD .)
    :               reduce using rule 46 (aritmetic -> MOD .)
    OPERATORS       reduce using rule 46 (aritmetic -> MOD .)
    MOD             reduce using rule 46 (aritmetic -> MOD .)
    .               reduce using rule 46 (aritmetic -> MOD .)
    ONEONE          reduce using rule 46 (aritmetic -> MOD .)
    SWAP            reduce using rule 46 (aritmetic -> MOD .)
    DROP            reduce using rule 46 (aritmetic -> MOD .)
    DUP             reduce using rule 46 (aritmetic -> MOD .)
    OVER            reduce using rule 46 (aritmetic -> MOD .)
    ROT             reduce using rule 46 (aritmetic -> MOD .)
    DOT             reduce using rule 46 (aritmetic -> MOD .)
    EMIT            reduce using rule 46 (aritmetic -> MOD .)
    CHAR            reduce using rule 46 (aritmetic -> MOD .)
    SPACES          reduce using rule 46 (aritmetic -> MOD .)
    CR              reduce using rule 46 (aritmetic -> MOD .)
    NUMBER          reduce using rule 46 (aritmetic -> MOD .)
    DO              reduce using rule 46 (aritmetic -> MOD .)
    IF              reduce using rule 46 (aritmetic -> MOD .)
    $end            reduce using rule 46 (aritmetic -> MOD .)
    LOOP            reduce using rule 46 (aritmetic -> MOD .)
    ITERATOR        reduce using rule 46 (aritmetic -> MOD .)
    THEN            reduce using rule 46 (aritmetic -> MOD .)
    ELSE            reduce using rule 46 (aritmetic -> MOD .)
    ;               reduce using rule 46 (aritmetic -> MOD .)


state 23

    (93) dot -> . .

    STRING          reduce using rule 93 (dot -> . .)
    :               reduce using rule 93 (dot -> . .)
    OPERATORS       reduce using rule 93 (dot -> . .)
    MOD             reduce using rule 93 (dot -> . .)
    .               reduce using rule 93 (dot -> . .)
    ONEONE          reduce using rule 93 (dot -> . .)
    SWAP            reduce using rule 93 (dot -> . .)
    DROP            reduce using rule 93 (dot -> . .)
    DUP             reduce using rule 93 (dot -> . .)
    OVER            reduce using rule 93 (dot -> . .)
    ROT             reduce using rule 93 (dot -> . .)
    DOT             reduce using rule 93 (dot -> . .)
    EMIT            reduce using rule 93 (dot -> . .)
    CHAR            reduce using rule 93 (dot -> . .)
    SPACES          reduce using rule 93 (dot -> . .)
    CR              reduce using rule 93 (dot -> . .)
    NUMBER          reduce using rule 93 (dot -> . .)
    DO              reduce using rule 93 (dot -> . .)
    IF              reduce using rule 93 (dot -> . .)
    $end            reduce using rule 93 (dot -> . .)
    LOOP            reduce using rule 93 (dot -> . .)
    ITERATOR        reduce using rule 93 (dot -> . .)
    THEN            reduce using rule 93 (dot -> . .)
    ELSE            reduce using rule 93 (dot -> . .)
    ;               reduce using rule 93 (dot -> . .)


state 24

    (88) oneOne -> ONEONE .

    STRING          reduce using rule 88 (oneOne -> ONEONE .)
    :               reduce using rule 88 (oneOne -> ONEONE .)
    OPERATORS       reduce using rule 88 (oneOne -> ONEONE .)
    MOD             reduce using rule 88 (oneOne -> ONEONE .)
    .               reduce using rule 88 (oneOne -> ONEONE .)
    ONEONE          reduce using rule 88 (oneOne -> ONEONE .)
    SWAP            reduce using rule 88 (oneOne -> ONEONE .)
    DROP            reduce using rule 88 (oneOne -> ONEONE .)
    DUP             reduce using rule 88 (oneOne -> ONEONE .)
    OVER            reduce using rule 88 (oneOne -> ONEONE .)
    ROT             reduce using rule 88 (oneOne -> ONEONE .)
    DOT             reduce using rule 88 (oneOne -> ONEONE .)
    EMIT            reduce using rule 88 (oneOne -> ONEONE .)
    CHAR            reduce using rule 88 (oneOne -> ONEONE .)
    SPACES          reduce using rule 88 (oneOne -> ONEONE .)
    CR              reduce using rule 88 (oneOne -> ONEONE .)
    NUMBER          reduce using rule 88 (oneOne -> ONEONE .)
    DO              reduce using rule 88 (oneOne -> ONEONE .)
    IF              reduce using rule 88 (oneOne -> ONEONE .)
    $end            reduce using rule 88 (oneOne -> ONEONE .)
    LOOP            reduce using rule 88 (oneOne -> ONEONE .)
    ITERATOR        reduce using rule 88 (oneOne -> ONEONE .)
    THEN            reduce using rule 88 (oneOne -> ONEONE .)
    ELSE            reduce using rule 88 (oneOne -> ONEONE .)
    ;               reduce using rule 88 (oneOne -> ONEONE .)


state 25

    (91) swap -> SWAP .

    STRING          reduce using rule 91 (swap -> SWAP .)
    :               reduce using rule 91 (swap -> SWAP .)
    OPERATORS       reduce using rule 91 (swap -> SWAP .)
    MOD             reduce using rule 91 (swap -> SWAP .)
    .               reduce using rule 91 (swap -> SWAP .)
    ONEONE          reduce using rule 91 (swap -> SWAP .)
    SWAP            reduce using rule 91 (swap -> SWAP .)
    DROP            reduce using rule 91 (swap -> SWAP .)
    DUP             reduce using rule 91 (swap -> SWAP .)
    OVER            reduce using rule 91 (swap -> SWAP .)
    ROT             reduce using rule 91 (swap -> SWAP .)
    DOT             reduce using rule 91 (swap -> SWAP .)
    EMIT            reduce using rule 91 (swap -> SWAP .)
    CHAR            reduce using rule 91 (swap -> SWAP .)
    SPACES          reduce using rule 91 (swap -> SWAP .)
    CR              reduce using rule 91 (swap -> SWAP .)
    NUMBER          reduce using rule 91 (swap -> SWAP .)
    DO              reduce using rule 91 (swap -> SWAP .)
    IF              reduce using rule 91 (swap -> SWAP .)
    $end            reduce using rule 91 (swap -> SWAP .)
    LOOP            reduce using rule 91 (swap -> SWAP .)
    ITERATOR        reduce using rule 91 (swap -> SWAP .)
    THEN            reduce using rule 91 (swap -> SWAP .)
    ELSE            reduce using rule 91 (swap -> SWAP .)
    ;               reduce using rule 91 (swap -> SWAP .)


state 26

    (89) drop -> DROP .

    STRING          reduce using rule 89 (drop -> DROP .)
    :               reduce using rule 89 (drop -> DROP .)
    OPERATORS       reduce using rule 89 (drop -> DROP .)
    MOD             reduce using rule 89 (drop -> DROP .)
    .               reduce using rule 89 (drop -> DROP .)
    ONEONE          reduce using rule 89 (drop -> DROP .)
    SWAP            reduce using rule 89 (drop -> DROP .)
    DROP            reduce using rule 89 (drop -> DROP .)
    DUP             reduce using rule 89 (drop -> DROP .)
    OVER            reduce using rule 89 (drop -> DROP .)
    ROT             reduce using rule 89 (drop -> DROP .)
    DOT             reduce using rule 89 (drop -> DROP .)
    EMIT            reduce using rule 89 (drop -> DROP .)
    CHAR            reduce using rule 89 (drop -> DROP .)
    SPACES          reduce using rule 89 (drop -> DROP .)
    CR              reduce using rule 89 (drop -> DROP .)
    NUMBER          reduce using rule 89 (drop -> DROP .)
    DO              reduce using rule 89 (drop -> DROP .)
    IF              reduce using rule 89 (drop -> DROP .)
    $end            reduce using rule 89 (drop -> DROP .)
    LOOP            reduce using rule 89 (drop -> DROP .)
    ITERATOR        reduce using rule 89 (drop -> DROP .)
    THEN            reduce using rule 89 (drop -> DROP .)
    ELSE            reduce using rule 89 (drop -> DROP .)
    ;               reduce using rule 89 (drop -> DROP .)


state 27

    (52) dup -> DUP .

    STRING          reduce using rule 52 (dup -> DUP .)
    :               reduce using rule 52 (dup -> DUP .)
    OPERATORS       reduce using rule 52 (dup -> DUP .)
    MOD             reduce using rule 52 (dup -> DUP .)
    .               reduce using rule 52 (dup -> DUP .)
    ONEONE          reduce using rule 52 (dup -> DUP .)
    SWAP            reduce using rule 52 (dup -> DUP .)
    DROP            reduce using rule 52 (dup -> DUP .)
    DUP             reduce using rule 52 (dup -> DUP .)
    OVER            reduce using rule 52 (dup -> DUP .)
    ROT             reduce using rule 52 (dup -> DUP .)
    DOT             reduce using rule 52 (dup -> DUP .)
    EMIT            reduce using rule 52 (dup -> DUP .)
    CHAR            reduce using rule 52 (dup -> DUP .)
    SPACES          reduce using rule 52 (dup -> DUP .)
    CR              reduce using rule 52 (dup -> DUP .)
    NUMBER          reduce using rule 52 (dup -> DUP .)
    DO              reduce using rule 52 (dup -> DUP .)
    IF              reduce using rule 52 (dup -> DUP .)
    $end            reduce using rule 52 (dup -> DUP .)
    LOOP            reduce using rule 52 (dup -> DUP .)
    ITERATOR        reduce using rule 52 (dup -> DUP .)
    THEN            reduce using rule 52 (dup -> DUP .)
    ELSE            reduce using rule 52 (dup -> DUP .)
    ;               reduce using rule 52 (dup -> DUP .)


state 28

    (92) over -> OVER .

    STRING          reduce using rule 92 (over -> OVER .)
    :               reduce using rule 92 (over -> OVER .)
    OPERATORS       reduce using rule 92 (over -> OVER .)
    MOD             reduce using rule 92 (over -> OVER .)
    .               reduce using rule 92 (over -> OVER .)
    ONEONE          reduce using rule 92 (over -> OVER .)
    SWAP            reduce using rule 92 (over -> OVER .)
    DROP            reduce using rule 92 (over -> OVER .)
    DUP             reduce using rule 92 (over -> OVER .)
    OVER            reduce using rule 92 (over -> OVER .)
    ROT             reduce using rule 92 (over -> OVER .)
    DOT             reduce using rule 92 (over -> OVER .)
    EMIT            reduce using rule 92 (over -> OVER .)
    CHAR            reduce using rule 92 (over -> OVER .)
    SPACES          reduce using rule 92 (over -> OVER .)
    CR              reduce using rule 92 (over -> OVER .)
    NUMBER          reduce using rule 92 (over -> OVER .)
    DO              reduce using rule 92 (over -> OVER .)
    IF              reduce using rule 92 (over -> OVER .)
    $end            reduce using rule 92 (over -> OVER .)
    LOOP            reduce using rule 92 (over -> OVER .)
    ITERATOR        reduce using rule 92 (over -> OVER .)
    THEN            reduce using rule 92 (over -> OVER .)
    ELSE            reduce using rule 92 (over -> OVER .)
    ;               reduce using rule 92 (over -> OVER .)


state 29

    (90) rot -> ROT .

    STRING          reduce using rule 90 (rot -> ROT .)
    :               reduce using rule 90 (rot -> ROT .)
    OPERATORS       reduce using rule 90 (rot -> ROT .)
    MOD             reduce using rule 90 (rot -> ROT .)
    .               reduce using rule 90 (rot -> ROT .)
    ONEONE          reduce using rule 90 (rot -> ROT .)
    SWAP            reduce using rule 90 (rot -> ROT .)
    DROP            reduce using rule 90 (rot -> ROT .)
    DUP             reduce using rule 90 (rot -> ROT .)
    OVER            reduce using rule 90 (rot -> ROT .)
    ROT             reduce using rule 90 (rot -> ROT .)
    DOT             reduce using rule 90 (rot -> ROT .)
    EMIT            reduce using rule 90 (rot -> ROT .)
    CHAR            reduce using rule 90 (rot -> ROT .)
    SPACES          reduce using rule 90 (rot -> ROT .)
    CR              reduce using rule 90 (rot -> ROT .)
    NUMBER          reduce using rule 90 (rot -> ROT .)
    DO              reduce using rule 90 (rot -> ROT .)
    IF              reduce using rule 90 (rot -> ROT .)
    $end            reduce using rule 90 (rot -> ROT .)
    LOOP            reduce using rule 90 (rot -> ROT .)
    ITERATOR        reduce using rule 90 (rot -> ROT .)
    THEN            reduce using rule 90 (rot -> ROT .)
    ELSE            reduce using rule 90 (rot -> ROT .)
    ;               reduce using rule 90 (rot -> ROT .)


state 30

    (47) print -> DOT .

    STRING          reduce using rule 47 (print -> DOT .)
    :               reduce using rule 47 (print -> DOT .)
    OPERATORS       reduce using rule 47 (print -> DOT .)
    MOD             reduce using rule 47 (print -> DOT .)
    .               reduce using rule 47 (print -> DOT .)
    ONEONE          reduce using rule 47 (print -> DOT .)
    SWAP            reduce using rule 47 (print -> DOT .)
    DROP            reduce using rule 47 (print -> DOT .)
    DUP             reduce using rule 47 (print -> DOT .)
    OVER            reduce using rule 47 (print -> DOT .)
    ROT             reduce using rule 47 (print -> DOT .)
    DOT             reduce using rule 47 (print -> DOT .)
    EMIT            reduce using rule 47 (print -> DOT .)
    CHAR            reduce using rule 47 (print -> DOT .)
    SPACES          reduce using rule 47 (print -> DOT .)
    CR              reduce using rule 47 (print -> DOT .)
    NUMBER          reduce using rule 47 (print -> DOT .)
    DO              reduce using rule 47 (print -> DOT .)
    IF              reduce using rule 47 (print -> DOT .)
    $end            reduce using rule 47 (print -> DOT .)
    LOOP            reduce using rule 47 (print -> DOT .)
    ITERATOR        reduce using rule 47 (print -> DOT .)
    THEN            reduce using rule 47 (print -> DOT .)
    ELSE            reduce using rule 47 (print -> DOT .)
    ;               reduce using rule 47 (print -> DOT .)


state 31

    (48) print -> EMIT .

    STRING          reduce using rule 48 (print -> EMIT .)
    :               reduce using rule 48 (print -> EMIT .)
    OPERATORS       reduce using rule 48 (print -> EMIT .)
    MOD             reduce using rule 48 (print -> EMIT .)
    .               reduce using rule 48 (print -> EMIT .)
    ONEONE          reduce using rule 48 (print -> EMIT .)
    SWAP            reduce using rule 48 (print -> EMIT .)
    DROP            reduce using rule 48 (print -> EMIT .)
    DUP             reduce using rule 48 (print -> EMIT .)
    OVER            reduce using rule 48 (print -> EMIT .)
    ROT             reduce using rule 48 (print -> EMIT .)
    DOT             reduce using rule 48 (print -> EMIT .)
    EMIT            reduce using rule 48 (print -> EMIT .)
    CHAR            reduce using rule 48 (print -> EMIT .)
    SPACES          reduce using rule 48 (print -> EMIT .)
    CR              reduce using rule 48 (print -> EMIT .)
    NUMBER          reduce using rule 48 (print -> EMIT .)
    DO              reduce using rule 48 (print -> EMIT .)
    IF              reduce using rule 48 (print -> EMIT .)
    $end            reduce using rule 48 (print -> EMIT .)
    LOOP            reduce using rule 48 (print -> EMIT .)
    ITERATOR        reduce using rule 48 (print -> EMIT .)
    THEN            reduce using rule 48 (print -> EMIT .)
    ELSE            reduce using rule 48 (print -> EMIT .)
    ;               reduce using rule 48 (print -> EMIT .)


state 32

    (49) print -> CHAR .

    STRING          reduce using rule 49 (print -> CHAR .)
    :               reduce using rule 49 (print -> CHAR .)
    OPERATORS       reduce using rule 49 (print -> CHAR .)
    MOD             reduce using rule 49 (print -> CHAR .)
    .               reduce using rule 49 (print -> CHAR .)
    ONEONE          reduce using rule 49 (print -> CHAR .)
    SWAP            reduce using rule 49 (print -> CHAR .)
    DROP            reduce using rule 49 (print -> CHAR .)
    DUP             reduce using rule 49 (print -> CHAR .)
    OVER            reduce using rule 49 (print -> CHAR .)
    ROT             reduce using rule 49 (print -> CHAR .)
    DOT             reduce using rule 49 (print -> CHAR .)
    EMIT            reduce using rule 49 (print -> CHAR .)
    CHAR            reduce using rule 49 (print -> CHAR .)
    SPACES          reduce using rule 49 (print -> CHAR .)
    CR              reduce using rule 49 (print -> CHAR .)
    NUMBER          reduce using rule 49 (print -> CHAR .)
    DO              reduce using rule 49 (print -> CHAR .)
    IF              reduce using rule 49 (print -> CHAR .)
    $end            reduce using rule 49 (print -> CHAR .)
    LOOP            reduce using rule 49 (print -> CHAR .)
    ITERATOR        reduce using rule 49 (print -> CHAR .)
    THEN            reduce using rule 49 (print -> CHAR .)
    ELSE            reduce using rule 49 (print -> CHAR .)
    ;               reduce using rule 49 (print -> CHAR .)


state 33

    (50) print -> SPACES .

    STRING          reduce using rule 50 (print -> SPACES .)
    :               reduce using rule 50 (print -> SPACES .)
    OPERATORS       reduce using rule 50 (print -> SPACES .)
    MOD             reduce using rule 50 (print -> SPACES .)
    .               reduce using rule 50 (print -> SPACES .)
    ONEONE          reduce using rule 50 (print -> SPACES .)
    SWAP            reduce using rule 50 (print -> SPACES .)
    DROP            reduce using rule 50 (print -> SPACES .)
    DUP             reduce using rule 50 (print -> SPACES .)
    OVER            reduce using rule 50 (print -> SPACES .)
    ROT             reduce using rule 50 (print -> SPACES .)
    DOT             reduce using rule 50 (print -> SPACES .)
    EMIT            reduce using rule 50 (print -> SPACES .)
    CHAR            reduce using rule 50 (print -> SPACES .)
    SPACES          reduce using rule 50 (print -> SPACES .)
    CR              reduce using rule 50 (print -> SPACES .)
    NUMBER          reduce using rule 50 (print -> SPACES .)
    DO              reduce using rule 50 (print -> SPACES .)
    IF              reduce using rule 50 (print -> SPACES .)
    $end            reduce using rule 50 (print -> SPACES .)
    LOOP            reduce using rule 50 (print -> SPACES .)
    ITERATOR        reduce using rule 50 (print -> SPACES .)
    THEN            reduce using rule 50 (print -> SPACES .)
    ELSE            reduce using rule 50 (print -> SPACES .)
    ;               reduce using rule 50 (print -> SPACES .)


state 34

    (51) print -> CR .

    STRING          reduce using rule 51 (print -> CR .)
    :               reduce using rule 51 (print -> CR .)
    OPERATORS       reduce using rule 51 (print -> CR .)
    MOD             reduce using rule 51 (print -> CR .)
    .               reduce using rule 51 (print -> CR .)
    ONEONE          reduce using rule 51 (print -> CR .)
    SWAP            reduce using rule 51 (print -> CR .)
    DROP            reduce using rule 51 (print -> CR .)
    DUP             reduce using rule 51 (print -> CR .)
    OVER            reduce using rule 51 (print -> CR .)
    ROT             reduce using rule 51 (print -> CR .)
    DOT             reduce using rule 51 (print -> CR .)
    EMIT            reduce using rule 51 (print -> CR .)
    CHAR            reduce using rule 51 (print -> CR .)
    SPACES          reduce using rule 51 (print -> CR .)
    CR              reduce using rule 51 (print -> CR .)
    NUMBER          reduce using rule 51 (print -> CR .)
    DO              reduce using rule 51 (print -> CR .)
    IF              reduce using rule 51 (print -> CR .)
    $end            reduce using rule 51 (print -> CR .)
    LOOP            reduce using rule 51 (print -> CR .)
    ITERATOR        reduce using rule 51 (print -> CR .)
    THEN            reduce using rule 51 (print -> CR .)
    ELSE            reduce using rule 51 (print -> CR .)
    ;               reduce using rule 51 (print -> CR .)


state 35

    (94) number -> NUMBER .

    STRING          reduce using rule 94 (number -> NUMBER .)
    :               reduce using rule 94 (number -> NUMBER .)
    OPERATORS       reduce using rule 94 (number -> NUMBER .)
    MOD             reduce using rule 94 (number -> NUMBER .)
    .               reduce using rule 94 (number -> NUMBER .)
    ONEONE          reduce using rule 94 (number -> NUMBER .)
    SWAP            reduce using rule 94 (number -> NUMBER .)
    DROP            reduce using rule 94 (number -> NUMBER .)
    DUP             reduce using rule 94 (number -> NUMBER .)
    OVER            reduce using rule 94 (number -> NUMBER .)
    ROT             reduce using rule 94 (number -> NUMBER .)
    DOT             reduce using rule 94 (number -> NUMBER .)
    EMIT            reduce using rule 94 (number -> NUMBER .)
    CHAR            reduce using rule 94 (number -> NUMBER .)
    SPACES          reduce using rule 94 (number -> NUMBER .)
    CR              reduce using rule 94 (number -> NUMBER .)
    NUMBER          reduce using rule 94 (number -> NUMBER .)
    DO              reduce using rule 94 (number -> NUMBER .)
    IF              reduce using rule 94 (number -> NUMBER .)
    $end            reduce using rule 94 (number -> NUMBER .)
    LOOP            reduce using rule 94 (number -> NUMBER .)
    ITERATOR        reduce using rule 94 (number -> NUMBER .)
    THEN            reduce using rule 94 (number -> NUMBER .)
    ELSE            reduce using rule 94 (number -> NUMBER .)
    ;               reduce using rule 94 (number -> NUMBER .)


state 36

    (53) condition -> If .

    STRING          reduce using rule 53 (condition -> If .)
    :               reduce using rule 53 (condition -> If .)
    OPERATORS       reduce using rule 53 (condition -> If .)
    MOD             reduce using rule 53 (condition -> If .)
    .               reduce using rule 53 (condition -> If .)
    ONEONE          reduce using rule 53 (condition -> If .)
    SWAP            reduce using rule 53 (condition -> If .)
    DROP            reduce using rule 53 (condition -> If .)
    DUP             reduce using rule 53 (condition -> If .)
    OVER            reduce using rule 53 (condition -> If .)
    ROT             reduce using rule 53 (condition -> If .)
    DOT             reduce using rule 53 (condition -> If .)
    EMIT            reduce using rule 53 (condition -> If .)
    CHAR            reduce using rule 53 (condition -> If .)
    SPACES          reduce using rule 53 (condition -> If .)
    CR              reduce using rule 53 (condition -> If .)
    NUMBER          reduce using rule 53 (condition -> If .)
    DO              reduce using rule 53 (condition -> If .)
    IF              reduce using rule 53 (condition -> If .)
    $end            reduce using rule 53 (condition -> If .)
    LOOP            reduce using rule 53 (condition -> If .)
    ITERATOR        reduce using rule 53 (condition -> If .)
    THEN            reduce using rule 53 (condition -> If .)
    ELSE            reduce using rule 53 (condition -> If .)
    ;               reduce using rule 53 (condition -> If .)


state 37

    (87) do -> DO . do_operators LOOP
    (61) do_operators -> . do_operators aritmetic
    (62) do_operators -> . do_operators dot
    (63) do_operators -> . do_operators oneOne
    (64) do_operators -> . do_operators swap
    (65) do_operators -> . do_operators drop
    (66) do_operators -> . do_operators dup
    (67) do_operators -> . do_operators over
    (68) do_operators -> . do_operators rot
    (69) do_operators -> . do_operators print
    (70) do_operators -> . do_operators number
    (71) do_operators -> . do_operators condition
    (72) do_operators -> . do_operators do
    (73) do_operators -> . do_operators Iterator
    (74) do_operators -> . aritmetic
    (75) do_operators -> . dot
    (76) do_operators -> . oneOne
    (77) do_operators -> . swap
    (78) do_operators -> . drop
    (79) do_operators -> . dup
    (80) do_operators -> . over
    (81) do_operators -> . rot
    (82) do_operators -> . print
    (83) do_operators -> . number
    (84) do_operators -> . condition
    (85) do_operators -> . do
    (86) do_operators -> . Iterator
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (60) Iterator -> . ITERATOR
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    ITERATOR        shift and go to state 55
    IF              shift and go to state 38

    do_operators                   shift and go to state 41
    aritmetic                      shift and go to state 42
    dot                            shift and go to state 43
    oneOne                         shift and go to state 44
    swap                           shift and go to state 45
    drop                           shift and go to state 46
    dup                            shift and go to state 47
    over                           shift and go to state 48
    rot                            shift and go to state 49
    print                          shift and go to state 50
    number                         shift and go to state 51
    condition                      shift and go to state 52
    do                             shift and go to state 53
    Iterator                       shift and go to state 54
    If                             shift and go to state 36

state 38

    (54) If -> IF . operators Else
    (55) If -> IF . Else
    (56) If -> IF . operators THEN
    (57) If -> IF . THEN
    (21) operators -> . operators aritmetic
    (22) operators -> . operators dot
    (23) operators -> . operators oneOne
    (24) operators -> . operators swap
    (25) operators -> . operators drop
    (26) operators -> . operators dup
    (27) operators -> . operators over
    (28) operators -> . operators rot
    (29) operators -> . operators print
    (30) operators -> . operators number
    (31) operators -> . operators condition
    (32) operators -> . operators do
    (33) operators -> . aritmetic
    (34) operators -> . dot
    (35) operators -> . oneOne
    (36) operators -> . swap
    (37) operators -> . drop
    (38) operators -> . dup
    (39) operators -> . over
    (40) operators -> . rot
    (41) operators -> . print
    (42) operators -> . number
    (43) operators -> . condition
    (44) operators -> . do
    (58) Else -> . ELSE operators THEN
    (59) Else -> . ELSE THEN
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    THEN            shift and go to state 58
    ELSE            shift and go to state 71
    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    IF              shift and go to state 38

    operators                      shift and go to state 56
    Else                           shift and go to state 57
    aritmetic                      shift and go to state 59
    dot                            shift and go to state 60
    oneOne                         shift and go to state 61
    swap                           shift and go to state 62
    drop                           shift and go to state 63
    dup                            shift and go to state 64
    over                           shift and go to state 65
    rot                            shift and go to state 66
    print                          shift and go to state 67
    number                         shift and go to state 68
    condition                      shift and go to state 69
    do                             shift and go to state 70
    If                             shift and go to state 36

state 39

    (2) expressions -> expressions word .

    STRING          reduce using rule 2 (expressions -> expressions word .)
    :               reduce using rule 2 (expressions -> expressions word .)
    OPERATORS       reduce using rule 2 (expressions -> expressions word .)
    MOD             reduce using rule 2 (expressions -> expressions word .)
    .               reduce using rule 2 (expressions -> expressions word .)
    ONEONE          reduce using rule 2 (expressions -> expressions word .)
    SWAP            reduce using rule 2 (expressions -> expressions word .)
    DROP            reduce using rule 2 (expressions -> expressions word .)
    DUP             reduce using rule 2 (expressions -> expressions word .)
    OVER            reduce using rule 2 (expressions -> expressions word .)
    ROT             reduce using rule 2 (expressions -> expressions word .)
    DOT             reduce using rule 2 (expressions -> expressions word .)
    EMIT            reduce using rule 2 (expressions -> expressions word .)
    CHAR            reduce using rule 2 (expressions -> expressions word .)
    SPACES          reduce using rule 2 (expressions -> expressions word .)
    CR              reduce using rule 2 (expressions -> expressions word .)
    NUMBER          reduce using rule 2 (expressions -> expressions word .)
    DO              reduce using rule 2 (expressions -> expressions word .)
    IF              reduce using rule 2 (expressions -> expressions word .)
    $end            reduce using rule 2 (expressions -> expressions word .)


state 40

    (8) function_definition -> : STRING . operators ;
    (21) operators -> . operators aritmetic
    (22) operators -> . operators dot
    (23) operators -> . operators oneOne
    (24) operators -> . operators swap
    (25) operators -> . operators drop
    (26) operators -> . operators dup
    (27) operators -> . operators over
    (28) operators -> . operators rot
    (29) operators -> . operators print
    (30) operators -> . operators number
    (31) operators -> . operators condition
    (32) operators -> . operators do
    (33) operators -> . aritmetic
    (34) operators -> . dot
    (35) operators -> . oneOne
    (36) operators -> . swap
    (37) operators -> . drop
    (38) operators -> . dup
    (39) operators -> . over
    (40) operators -> . rot
    (41) operators -> . print
    (42) operators -> . number
    (43) operators -> . condition
    (44) operators -> . do
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    IF              shift and go to state 38

    operators                      shift and go to state 72
    aritmetic                      shift and go to state 59
    dot                            shift and go to state 60
    oneOne                         shift and go to state 61
    swap                           shift and go to state 62
    drop                           shift and go to state 63
    dup                            shift and go to state 64
    over                           shift and go to state 65
    rot                            shift and go to state 66
    print                          shift and go to state 67
    number                         shift and go to state 68
    condition                      shift and go to state 69
    do                             shift and go to state 70
    If                             shift and go to state 36

state 41

    (87) do -> DO do_operators . LOOP
    (61) do_operators -> do_operators . aritmetic
    (62) do_operators -> do_operators . dot
    (63) do_operators -> do_operators . oneOne
    (64) do_operators -> do_operators . swap
    (65) do_operators -> do_operators . drop
    (66) do_operators -> do_operators . dup
    (67) do_operators -> do_operators . over
    (68) do_operators -> do_operators . rot
    (69) do_operators -> do_operators . print
    (70) do_operators -> do_operators . number
    (71) do_operators -> do_operators . condition
    (72) do_operators -> do_operators . do
    (73) do_operators -> do_operators . Iterator
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (60) Iterator -> . ITERATOR
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    LOOP            shift and go to state 73
    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    ITERATOR        shift and go to state 55
    IF              shift and go to state 38

    aritmetic                      shift and go to state 74
    dot                            shift and go to state 75
    oneOne                         shift and go to state 76
    swap                           shift and go to state 77
    drop                           shift and go to state 78
    dup                            shift and go to state 79
    over                           shift and go to state 80
    rot                            shift and go to state 81
    print                          shift and go to state 82
    number                         shift and go to state 83
    condition                      shift and go to state 84
    do                             shift and go to state 85
    Iterator                       shift and go to state 86
    If                             shift and go to state 36

state 42

    (74) do_operators -> aritmetic .

    LOOP            reduce using rule 74 (do_operators -> aritmetic .)
    OPERATORS       reduce using rule 74 (do_operators -> aritmetic .)
    MOD             reduce using rule 74 (do_operators -> aritmetic .)
    .               reduce using rule 74 (do_operators -> aritmetic .)
    ONEONE          reduce using rule 74 (do_operators -> aritmetic .)
    SWAP            reduce using rule 74 (do_operators -> aritmetic .)
    DROP            reduce using rule 74 (do_operators -> aritmetic .)
    DUP             reduce using rule 74 (do_operators -> aritmetic .)
    OVER            reduce using rule 74 (do_operators -> aritmetic .)
    ROT             reduce using rule 74 (do_operators -> aritmetic .)
    DOT             reduce using rule 74 (do_operators -> aritmetic .)
    EMIT            reduce using rule 74 (do_operators -> aritmetic .)
    CHAR            reduce using rule 74 (do_operators -> aritmetic .)
    SPACES          reduce using rule 74 (do_operators -> aritmetic .)
    CR              reduce using rule 74 (do_operators -> aritmetic .)
    NUMBER          reduce using rule 74 (do_operators -> aritmetic .)
    DO              reduce using rule 74 (do_operators -> aritmetic .)
    ITERATOR        reduce using rule 74 (do_operators -> aritmetic .)
    IF              reduce using rule 74 (do_operators -> aritmetic .)


state 43

    (75) do_operators -> dot .

    LOOP            reduce using rule 75 (do_operators -> dot .)
    OPERATORS       reduce using rule 75 (do_operators -> dot .)
    MOD             reduce using rule 75 (do_operators -> dot .)
    .               reduce using rule 75 (do_operators -> dot .)
    ONEONE          reduce using rule 75 (do_operators -> dot .)
    SWAP            reduce using rule 75 (do_operators -> dot .)
    DROP            reduce using rule 75 (do_operators -> dot .)
    DUP             reduce using rule 75 (do_operators -> dot .)
    OVER            reduce using rule 75 (do_operators -> dot .)
    ROT             reduce using rule 75 (do_operators -> dot .)
    DOT             reduce using rule 75 (do_operators -> dot .)
    EMIT            reduce using rule 75 (do_operators -> dot .)
    CHAR            reduce using rule 75 (do_operators -> dot .)
    SPACES          reduce using rule 75 (do_operators -> dot .)
    CR              reduce using rule 75 (do_operators -> dot .)
    NUMBER          reduce using rule 75 (do_operators -> dot .)
    DO              reduce using rule 75 (do_operators -> dot .)
    ITERATOR        reduce using rule 75 (do_operators -> dot .)
    IF              reduce using rule 75 (do_operators -> dot .)


state 44

    (76) do_operators -> oneOne .

    LOOP            reduce using rule 76 (do_operators -> oneOne .)
    OPERATORS       reduce using rule 76 (do_operators -> oneOne .)
    MOD             reduce using rule 76 (do_operators -> oneOne .)
    .               reduce using rule 76 (do_operators -> oneOne .)
    ONEONE          reduce using rule 76 (do_operators -> oneOne .)
    SWAP            reduce using rule 76 (do_operators -> oneOne .)
    DROP            reduce using rule 76 (do_operators -> oneOne .)
    DUP             reduce using rule 76 (do_operators -> oneOne .)
    OVER            reduce using rule 76 (do_operators -> oneOne .)
    ROT             reduce using rule 76 (do_operators -> oneOne .)
    DOT             reduce using rule 76 (do_operators -> oneOne .)
    EMIT            reduce using rule 76 (do_operators -> oneOne .)
    CHAR            reduce using rule 76 (do_operators -> oneOne .)
    SPACES          reduce using rule 76 (do_operators -> oneOne .)
    CR              reduce using rule 76 (do_operators -> oneOne .)
    NUMBER          reduce using rule 76 (do_operators -> oneOne .)
    DO              reduce using rule 76 (do_operators -> oneOne .)
    ITERATOR        reduce using rule 76 (do_operators -> oneOne .)
    IF              reduce using rule 76 (do_operators -> oneOne .)


state 45

    (77) do_operators -> swap .

    LOOP            reduce using rule 77 (do_operators -> swap .)
    OPERATORS       reduce using rule 77 (do_operators -> swap .)
    MOD             reduce using rule 77 (do_operators -> swap .)
    .               reduce using rule 77 (do_operators -> swap .)
    ONEONE          reduce using rule 77 (do_operators -> swap .)
    SWAP            reduce using rule 77 (do_operators -> swap .)
    DROP            reduce using rule 77 (do_operators -> swap .)
    DUP             reduce using rule 77 (do_operators -> swap .)
    OVER            reduce using rule 77 (do_operators -> swap .)
    ROT             reduce using rule 77 (do_operators -> swap .)
    DOT             reduce using rule 77 (do_operators -> swap .)
    EMIT            reduce using rule 77 (do_operators -> swap .)
    CHAR            reduce using rule 77 (do_operators -> swap .)
    SPACES          reduce using rule 77 (do_operators -> swap .)
    CR              reduce using rule 77 (do_operators -> swap .)
    NUMBER          reduce using rule 77 (do_operators -> swap .)
    DO              reduce using rule 77 (do_operators -> swap .)
    ITERATOR        reduce using rule 77 (do_operators -> swap .)
    IF              reduce using rule 77 (do_operators -> swap .)


state 46

    (78) do_operators -> drop .

    LOOP            reduce using rule 78 (do_operators -> drop .)
    OPERATORS       reduce using rule 78 (do_operators -> drop .)
    MOD             reduce using rule 78 (do_operators -> drop .)
    .               reduce using rule 78 (do_operators -> drop .)
    ONEONE          reduce using rule 78 (do_operators -> drop .)
    SWAP            reduce using rule 78 (do_operators -> drop .)
    DROP            reduce using rule 78 (do_operators -> drop .)
    DUP             reduce using rule 78 (do_operators -> drop .)
    OVER            reduce using rule 78 (do_operators -> drop .)
    ROT             reduce using rule 78 (do_operators -> drop .)
    DOT             reduce using rule 78 (do_operators -> drop .)
    EMIT            reduce using rule 78 (do_operators -> drop .)
    CHAR            reduce using rule 78 (do_operators -> drop .)
    SPACES          reduce using rule 78 (do_operators -> drop .)
    CR              reduce using rule 78 (do_operators -> drop .)
    NUMBER          reduce using rule 78 (do_operators -> drop .)
    DO              reduce using rule 78 (do_operators -> drop .)
    ITERATOR        reduce using rule 78 (do_operators -> drop .)
    IF              reduce using rule 78 (do_operators -> drop .)


state 47

    (79) do_operators -> dup .

    LOOP            reduce using rule 79 (do_operators -> dup .)
    OPERATORS       reduce using rule 79 (do_operators -> dup .)
    MOD             reduce using rule 79 (do_operators -> dup .)
    .               reduce using rule 79 (do_operators -> dup .)
    ONEONE          reduce using rule 79 (do_operators -> dup .)
    SWAP            reduce using rule 79 (do_operators -> dup .)
    DROP            reduce using rule 79 (do_operators -> dup .)
    DUP             reduce using rule 79 (do_operators -> dup .)
    OVER            reduce using rule 79 (do_operators -> dup .)
    ROT             reduce using rule 79 (do_operators -> dup .)
    DOT             reduce using rule 79 (do_operators -> dup .)
    EMIT            reduce using rule 79 (do_operators -> dup .)
    CHAR            reduce using rule 79 (do_operators -> dup .)
    SPACES          reduce using rule 79 (do_operators -> dup .)
    CR              reduce using rule 79 (do_operators -> dup .)
    NUMBER          reduce using rule 79 (do_operators -> dup .)
    DO              reduce using rule 79 (do_operators -> dup .)
    ITERATOR        reduce using rule 79 (do_operators -> dup .)
    IF              reduce using rule 79 (do_operators -> dup .)


state 48

    (80) do_operators -> over .

    LOOP            reduce using rule 80 (do_operators -> over .)
    OPERATORS       reduce using rule 80 (do_operators -> over .)
    MOD             reduce using rule 80 (do_operators -> over .)
    .               reduce using rule 80 (do_operators -> over .)
    ONEONE          reduce using rule 80 (do_operators -> over .)
    SWAP            reduce using rule 80 (do_operators -> over .)
    DROP            reduce using rule 80 (do_operators -> over .)
    DUP             reduce using rule 80 (do_operators -> over .)
    OVER            reduce using rule 80 (do_operators -> over .)
    ROT             reduce using rule 80 (do_operators -> over .)
    DOT             reduce using rule 80 (do_operators -> over .)
    EMIT            reduce using rule 80 (do_operators -> over .)
    CHAR            reduce using rule 80 (do_operators -> over .)
    SPACES          reduce using rule 80 (do_operators -> over .)
    CR              reduce using rule 80 (do_operators -> over .)
    NUMBER          reduce using rule 80 (do_operators -> over .)
    DO              reduce using rule 80 (do_operators -> over .)
    ITERATOR        reduce using rule 80 (do_operators -> over .)
    IF              reduce using rule 80 (do_operators -> over .)


state 49

    (81) do_operators -> rot .

    LOOP            reduce using rule 81 (do_operators -> rot .)
    OPERATORS       reduce using rule 81 (do_operators -> rot .)
    MOD             reduce using rule 81 (do_operators -> rot .)
    .               reduce using rule 81 (do_operators -> rot .)
    ONEONE          reduce using rule 81 (do_operators -> rot .)
    SWAP            reduce using rule 81 (do_operators -> rot .)
    DROP            reduce using rule 81 (do_operators -> rot .)
    DUP             reduce using rule 81 (do_operators -> rot .)
    OVER            reduce using rule 81 (do_operators -> rot .)
    ROT             reduce using rule 81 (do_operators -> rot .)
    DOT             reduce using rule 81 (do_operators -> rot .)
    EMIT            reduce using rule 81 (do_operators -> rot .)
    CHAR            reduce using rule 81 (do_operators -> rot .)
    SPACES          reduce using rule 81 (do_operators -> rot .)
    CR              reduce using rule 81 (do_operators -> rot .)
    NUMBER          reduce using rule 81 (do_operators -> rot .)
    DO              reduce using rule 81 (do_operators -> rot .)
    ITERATOR        reduce using rule 81 (do_operators -> rot .)
    IF              reduce using rule 81 (do_operators -> rot .)


state 50

    (82) do_operators -> print .

    LOOP            reduce using rule 82 (do_operators -> print .)
    OPERATORS       reduce using rule 82 (do_operators -> print .)
    MOD             reduce using rule 82 (do_operators -> print .)
    .               reduce using rule 82 (do_operators -> print .)
    ONEONE          reduce using rule 82 (do_operators -> print .)
    SWAP            reduce using rule 82 (do_operators -> print .)
    DROP            reduce using rule 82 (do_operators -> print .)
    DUP             reduce using rule 82 (do_operators -> print .)
    OVER            reduce using rule 82 (do_operators -> print .)
    ROT             reduce using rule 82 (do_operators -> print .)
    DOT             reduce using rule 82 (do_operators -> print .)
    EMIT            reduce using rule 82 (do_operators -> print .)
    CHAR            reduce using rule 82 (do_operators -> print .)
    SPACES          reduce using rule 82 (do_operators -> print .)
    CR              reduce using rule 82 (do_operators -> print .)
    NUMBER          reduce using rule 82 (do_operators -> print .)
    DO              reduce using rule 82 (do_operators -> print .)
    ITERATOR        reduce using rule 82 (do_operators -> print .)
    IF              reduce using rule 82 (do_operators -> print .)


state 51

    (83) do_operators -> number .

    LOOP            reduce using rule 83 (do_operators -> number .)
    OPERATORS       reduce using rule 83 (do_operators -> number .)
    MOD             reduce using rule 83 (do_operators -> number .)
    .               reduce using rule 83 (do_operators -> number .)
    ONEONE          reduce using rule 83 (do_operators -> number .)
    SWAP            reduce using rule 83 (do_operators -> number .)
    DROP            reduce using rule 83 (do_operators -> number .)
    DUP             reduce using rule 83 (do_operators -> number .)
    OVER            reduce using rule 83 (do_operators -> number .)
    ROT             reduce using rule 83 (do_operators -> number .)
    DOT             reduce using rule 83 (do_operators -> number .)
    EMIT            reduce using rule 83 (do_operators -> number .)
    CHAR            reduce using rule 83 (do_operators -> number .)
    SPACES          reduce using rule 83 (do_operators -> number .)
    CR              reduce using rule 83 (do_operators -> number .)
    NUMBER          reduce using rule 83 (do_operators -> number .)
    DO              reduce using rule 83 (do_operators -> number .)
    ITERATOR        reduce using rule 83 (do_operators -> number .)
    IF              reduce using rule 83 (do_operators -> number .)


state 52

    (84) do_operators -> condition .

    LOOP            reduce using rule 84 (do_operators -> condition .)
    OPERATORS       reduce using rule 84 (do_operators -> condition .)
    MOD             reduce using rule 84 (do_operators -> condition .)
    .               reduce using rule 84 (do_operators -> condition .)
    ONEONE          reduce using rule 84 (do_operators -> condition .)
    SWAP            reduce using rule 84 (do_operators -> condition .)
    DROP            reduce using rule 84 (do_operators -> condition .)
    DUP             reduce using rule 84 (do_operators -> condition .)
    OVER            reduce using rule 84 (do_operators -> condition .)
    ROT             reduce using rule 84 (do_operators -> condition .)
    DOT             reduce using rule 84 (do_operators -> condition .)
    EMIT            reduce using rule 84 (do_operators -> condition .)
    CHAR            reduce using rule 84 (do_operators -> condition .)
    SPACES          reduce using rule 84 (do_operators -> condition .)
    CR              reduce using rule 84 (do_operators -> condition .)
    NUMBER          reduce using rule 84 (do_operators -> condition .)
    DO              reduce using rule 84 (do_operators -> condition .)
    ITERATOR        reduce using rule 84 (do_operators -> condition .)
    IF              reduce using rule 84 (do_operators -> condition .)


state 53

    (85) do_operators -> do .

    LOOP            reduce using rule 85 (do_operators -> do .)
    OPERATORS       reduce using rule 85 (do_operators -> do .)
    MOD             reduce using rule 85 (do_operators -> do .)
    .               reduce using rule 85 (do_operators -> do .)
    ONEONE          reduce using rule 85 (do_operators -> do .)
    SWAP            reduce using rule 85 (do_operators -> do .)
    DROP            reduce using rule 85 (do_operators -> do .)
    DUP             reduce using rule 85 (do_operators -> do .)
    OVER            reduce using rule 85 (do_operators -> do .)
    ROT             reduce using rule 85 (do_operators -> do .)
    DOT             reduce using rule 85 (do_operators -> do .)
    EMIT            reduce using rule 85 (do_operators -> do .)
    CHAR            reduce using rule 85 (do_operators -> do .)
    SPACES          reduce using rule 85 (do_operators -> do .)
    CR              reduce using rule 85 (do_operators -> do .)
    NUMBER          reduce using rule 85 (do_operators -> do .)
    DO              reduce using rule 85 (do_operators -> do .)
    ITERATOR        reduce using rule 85 (do_operators -> do .)
    IF              reduce using rule 85 (do_operators -> do .)


state 54

    (86) do_operators -> Iterator .

    LOOP            reduce using rule 86 (do_operators -> Iterator .)
    OPERATORS       reduce using rule 86 (do_operators -> Iterator .)
    MOD             reduce using rule 86 (do_operators -> Iterator .)
    .               reduce using rule 86 (do_operators -> Iterator .)
    ONEONE          reduce using rule 86 (do_operators -> Iterator .)
    SWAP            reduce using rule 86 (do_operators -> Iterator .)
    DROP            reduce using rule 86 (do_operators -> Iterator .)
    DUP             reduce using rule 86 (do_operators -> Iterator .)
    OVER            reduce using rule 86 (do_operators -> Iterator .)
    ROT             reduce using rule 86 (do_operators -> Iterator .)
    DOT             reduce using rule 86 (do_operators -> Iterator .)
    EMIT            reduce using rule 86 (do_operators -> Iterator .)
    CHAR            reduce using rule 86 (do_operators -> Iterator .)
    SPACES          reduce using rule 86 (do_operators -> Iterator .)
    CR              reduce using rule 86 (do_operators -> Iterator .)
    NUMBER          reduce using rule 86 (do_operators -> Iterator .)
    DO              reduce using rule 86 (do_operators -> Iterator .)
    ITERATOR        reduce using rule 86 (do_operators -> Iterator .)
    IF              reduce using rule 86 (do_operators -> Iterator .)


state 55

    (60) Iterator -> ITERATOR .

    LOOP            reduce using rule 60 (Iterator -> ITERATOR .)
    OPERATORS       reduce using rule 60 (Iterator -> ITERATOR .)
    MOD             reduce using rule 60 (Iterator -> ITERATOR .)
    .               reduce using rule 60 (Iterator -> ITERATOR .)
    ONEONE          reduce using rule 60 (Iterator -> ITERATOR .)
    SWAP            reduce using rule 60 (Iterator -> ITERATOR .)
    DROP            reduce using rule 60 (Iterator -> ITERATOR .)
    DUP             reduce using rule 60 (Iterator -> ITERATOR .)
    OVER            reduce using rule 60 (Iterator -> ITERATOR .)
    ROT             reduce using rule 60 (Iterator -> ITERATOR .)
    DOT             reduce using rule 60 (Iterator -> ITERATOR .)
    EMIT            reduce using rule 60 (Iterator -> ITERATOR .)
    CHAR            reduce using rule 60 (Iterator -> ITERATOR .)
    SPACES          reduce using rule 60 (Iterator -> ITERATOR .)
    CR              reduce using rule 60 (Iterator -> ITERATOR .)
    NUMBER          reduce using rule 60 (Iterator -> ITERATOR .)
    DO              reduce using rule 60 (Iterator -> ITERATOR .)
    ITERATOR        reduce using rule 60 (Iterator -> ITERATOR .)
    IF              reduce using rule 60 (Iterator -> ITERATOR .)


state 56

    (54) If -> IF operators . Else
    (56) If -> IF operators . THEN
    (21) operators -> operators . aritmetic
    (22) operators -> operators . dot
    (23) operators -> operators . oneOne
    (24) operators -> operators . swap
    (25) operators -> operators . drop
    (26) operators -> operators . dup
    (27) operators -> operators . over
    (28) operators -> operators . rot
    (29) operators -> operators . print
    (30) operators -> operators . number
    (31) operators -> operators . condition
    (32) operators -> operators . do
    (58) Else -> . ELSE operators THEN
    (59) Else -> . ELSE THEN
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    THEN            shift and go to state 88
    ELSE            shift and go to state 71
    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    IF              shift and go to state 38

    Else                           shift and go to state 87
    aritmetic                      shift and go to state 89
    dot                            shift and go to state 90
    oneOne                         shift and go to state 91
    swap                           shift and go to state 92
    drop                           shift and go to state 93
    dup                            shift and go to state 94
    over                           shift and go to state 95
    rot                            shift and go to state 96
    print                          shift and go to state 97
    number                         shift and go to state 98
    condition                      shift and go to state 99
    do                             shift and go to state 100
    If                             shift and go to state 36

state 57

    (55) If -> IF Else .

    STRING          reduce using rule 55 (If -> IF Else .)
    :               reduce using rule 55 (If -> IF Else .)
    OPERATORS       reduce using rule 55 (If -> IF Else .)
    MOD             reduce using rule 55 (If -> IF Else .)
    .               reduce using rule 55 (If -> IF Else .)
    ONEONE          reduce using rule 55 (If -> IF Else .)
    SWAP            reduce using rule 55 (If -> IF Else .)
    DROP            reduce using rule 55 (If -> IF Else .)
    DUP             reduce using rule 55 (If -> IF Else .)
    OVER            reduce using rule 55 (If -> IF Else .)
    ROT             reduce using rule 55 (If -> IF Else .)
    DOT             reduce using rule 55 (If -> IF Else .)
    EMIT            reduce using rule 55 (If -> IF Else .)
    CHAR            reduce using rule 55 (If -> IF Else .)
    SPACES          reduce using rule 55 (If -> IF Else .)
    CR              reduce using rule 55 (If -> IF Else .)
    NUMBER          reduce using rule 55 (If -> IF Else .)
    DO              reduce using rule 55 (If -> IF Else .)
    IF              reduce using rule 55 (If -> IF Else .)
    $end            reduce using rule 55 (If -> IF Else .)
    LOOP            reduce using rule 55 (If -> IF Else .)
    ITERATOR        reduce using rule 55 (If -> IF Else .)
    THEN            reduce using rule 55 (If -> IF Else .)
    ELSE            reduce using rule 55 (If -> IF Else .)
    ;               reduce using rule 55 (If -> IF Else .)


state 58

    (57) If -> IF THEN .

    STRING          reduce using rule 57 (If -> IF THEN .)
    :               reduce using rule 57 (If -> IF THEN .)
    OPERATORS       reduce using rule 57 (If -> IF THEN .)
    MOD             reduce using rule 57 (If -> IF THEN .)
    .               reduce using rule 57 (If -> IF THEN .)
    ONEONE          reduce using rule 57 (If -> IF THEN .)
    SWAP            reduce using rule 57 (If -> IF THEN .)
    DROP            reduce using rule 57 (If -> IF THEN .)
    DUP             reduce using rule 57 (If -> IF THEN .)
    OVER            reduce using rule 57 (If -> IF THEN .)
    ROT             reduce using rule 57 (If -> IF THEN .)
    DOT             reduce using rule 57 (If -> IF THEN .)
    EMIT            reduce using rule 57 (If -> IF THEN .)
    CHAR            reduce using rule 57 (If -> IF THEN .)
    SPACES          reduce using rule 57 (If -> IF THEN .)
    CR              reduce using rule 57 (If -> IF THEN .)
    NUMBER          reduce using rule 57 (If -> IF THEN .)
    DO              reduce using rule 57 (If -> IF THEN .)
    IF              reduce using rule 57 (If -> IF THEN .)
    $end            reduce using rule 57 (If -> IF THEN .)
    LOOP            reduce using rule 57 (If -> IF THEN .)
    ITERATOR        reduce using rule 57 (If -> IF THEN .)
    THEN            reduce using rule 57 (If -> IF THEN .)
    ELSE            reduce using rule 57 (If -> IF THEN .)
    ;               reduce using rule 57 (If -> IF THEN .)


state 59

    (33) operators -> aritmetic .

    THEN            reduce using rule 33 (operators -> aritmetic .)
    ELSE            reduce using rule 33 (operators -> aritmetic .)
    OPERATORS       reduce using rule 33 (operators -> aritmetic .)
    MOD             reduce using rule 33 (operators -> aritmetic .)
    .               reduce using rule 33 (operators -> aritmetic .)
    ONEONE          reduce using rule 33 (operators -> aritmetic .)
    SWAP            reduce using rule 33 (operators -> aritmetic .)
    DROP            reduce using rule 33 (operators -> aritmetic .)
    DUP             reduce using rule 33 (operators -> aritmetic .)
    OVER            reduce using rule 33 (operators -> aritmetic .)
    ROT             reduce using rule 33 (operators -> aritmetic .)
    DOT             reduce using rule 33 (operators -> aritmetic .)
    EMIT            reduce using rule 33 (operators -> aritmetic .)
    CHAR            reduce using rule 33 (operators -> aritmetic .)
    SPACES          reduce using rule 33 (operators -> aritmetic .)
    CR              reduce using rule 33 (operators -> aritmetic .)
    NUMBER          reduce using rule 33 (operators -> aritmetic .)
    DO              reduce using rule 33 (operators -> aritmetic .)
    IF              reduce using rule 33 (operators -> aritmetic .)
    ;               reduce using rule 33 (operators -> aritmetic .)


state 60

    (34) operators -> dot .

    THEN            reduce using rule 34 (operators -> dot .)
    ELSE            reduce using rule 34 (operators -> dot .)
    OPERATORS       reduce using rule 34 (operators -> dot .)
    MOD             reduce using rule 34 (operators -> dot .)
    .               reduce using rule 34 (operators -> dot .)
    ONEONE          reduce using rule 34 (operators -> dot .)
    SWAP            reduce using rule 34 (operators -> dot .)
    DROP            reduce using rule 34 (operators -> dot .)
    DUP             reduce using rule 34 (operators -> dot .)
    OVER            reduce using rule 34 (operators -> dot .)
    ROT             reduce using rule 34 (operators -> dot .)
    DOT             reduce using rule 34 (operators -> dot .)
    EMIT            reduce using rule 34 (operators -> dot .)
    CHAR            reduce using rule 34 (operators -> dot .)
    SPACES          reduce using rule 34 (operators -> dot .)
    CR              reduce using rule 34 (operators -> dot .)
    NUMBER          reduce using rule 34 (operators -> dot .)
    DO              reduce using rule 34 (operators -> dot .)
    IF              reduce using rule 34 (operators -> dot .)
    ;               reduce using rule 34 (operators -> dot .)


state 61

    (35) operators -> oneOne .

    THEN            reduce using rule 35 (operators -> oneOne .)
    ELSE            reduce using rule 35 (operators -> oneOne .)
    OPERATORS       reduce using rule 35 (operators -> oneOne .)
    MOD             reduce using rule 35 (operators -> oneOne .)
    .               reduce using rule 35 (operators -> oneOne .)
    ONEONE          reduce using rule 35 (operators -> oneOne .)
    SWAP            reduce using rule 35 (operators -> oneOne .)
    DROP            reduce using rule 35 (operators -> oneOne .)
    DUP             reduce using rule 35 (operators -> oneOne .)
    OVER            reduce using rule 35 (operators -> oneOne .)
    ROT             reduce using rule 35 (operators -> oneOne .)
    DOT             reduce using rule 35 (operators -> oneOne .)
    EMIT            reduce using rule 35 (operators -> oneOne .)
    CHAR            reduce using rule 35 (operators -> oneOne .)
    SPACES          reduce using rule 35 (operators -> oneOne .)
    CR              reduce using rule 35 (operators -> oneOne .)
    NUMBER          reduce using rule 35 (operators -> oneOne .)
    DO              reduce using rule 35 (operators -> oneOne .)
    IF              reduce using rule 35 (operators -> oneOne .)
    ;               reduce using rule 35 (operators -> oneOne .)


state 62

    (36) operators -> swap .

    THEN            reduce using rule 36 (operators -> swap .)
    ELSE            reduce using rule 36 (operators -> swap .)
    OPERATORS       reduce using rule 36 (operators -> swap .)
    MOD             reduce using rule 36 (operators -> swap .)
    .               reduce using rule 36 (operators -> swap .)
    ONEONE          reduce using rule 36 (operators -> swap .)
    SWAP            reduce using rule 36 (operators -> swap .)
    DROP            reduce using rule 36 (operators -> swap .)
    DUP             reduce using rule 36 (operators -> swap .)
    OVER            reduce using rule 36 (operators -> swap .)
    ROT             reduce using rule 36 (operators -> swap .)
    DOT             reduce using rule 36 (operators -> swap .)
    EMIT            reduce using rule 36 (operators -> swap .)
    CHAR            reduce using rule 36 (operators -> swap .)
    SPACES          reduce using rule 36 (operators -> swap .)
    CR              reduce using rule 36 (operators -> swap .)
    NUMBER          reduce using rule 36 (operators -> swap .)
    DO              reduce using rule 36 (operators -> swap .)
    IF              reduce using rule 36 (operators -> swap .)
    ;               reduce using rule 36 (operators -> swap .)


state 63

    (37) operators -> drop .

    THEN            reduce using rule 37 (operators -> drop .)
    ELSE            reduce using rule 37 (operators -> drop .)
    OPERATORS       reduce using rule 37 (operators -> drop .)
    MOD             reduce using rule 37 (operators -> drop .)
    .               reduce using rule 37 (operators -> drop .)
    ONEONE          reduce using rule 37 (operators -> drop .)
    SWAP            reduce using rule 37 (operators -> drop .)
    DROP            reduce using rule 37 (operators -> drop .)
    DUP             reduce using rule 37 (operators -> drop .)
    OVER            reduce using rule 37 (operators -> drop .)
    ROT             reduce using rule 37 (operators -> drop .)
    DOT             reduce using rule 37 (operators -> drop .)
    EMIT            reduce using rule 37 (operators -> drop .)
    CHAR            reduce using rule 37 (operators -> drop .)
    SPACES          reduce using rule 37 (operators -> drop .)
    CR              reduce using rule 37 (operators -> drop .)
    NUMBER          reduce using rule 37 (operators -> drop .)
    DO              reduce using rule 37 (operators -> drop .)
    IF              reduce using rule 37 (operators -> drop .)
    ;               reduce using rule 37 (operators -> drop .)


state 64

    (38) operators -> dup .

    THEN            reduce using rule 38 (operators -> dup .)
    ELSE            reduce using rule 38 (operators -> dup .)
    OPERATORS       reduce using rule 38 (operators -> dup .)
    MOD             reduce using rule 38 (operators -> dup .)
    .               reduce using rule 38 (operators -> dup .)
    ONEONE          reduce using rule 38 (operators -> dup .)
    SWAP            reduce using rule 38 (operators -> dup .)
    DROP            reduce using rule 38 (operators -> dup .)
    DUP             reduce using rule 38 (operators -> dup .)
    OVER            reduce using rule 38 (operators -> dup .)
    ROT             reduce using rule 38 (operators -> dup .)
    DOT             reduce using rule 38 (operators -> dup .)
    EMIT            reduce using rule 38 (operators -> dup .)
    CHAR            reduce using rule 38 (operators -> dup .)
    SPACES          reduce using rule 38 (operators -> dup .)
    CR              reduce using rule 38 (operators -> dup .)
    NUMBER          reduce using rule 38 (operators -> dup .)
    DO              reduce using rule 38 (operators -> dup .)
    IF              reduce using rule 38 (operators -> dup .)
    ;               reduce using rule 38 (operators -> dup .)


state 65

    (39) operators -> over .

    THEN            reduce using rule 39 (operators -> over .)
    ELSE            reduce using rule 39 (operators -> over .)
    OPERATORS       reduce using rule 39 (operators -> over .)
    MOD             reduce using rule 39 (operators -> over .)
    .               reduce using rule 39 (operators -> over .)
    ONEONE          reduce using rule 39 (operators -> over .)
    SWAP            reduce using rule 39 (operators -> over .)
    DROP            reduce using rule 39 (operators -> over .)
    DUP             reduce using rule 39 (operators -> over .)
    OVER            reduce using rule 39 (operators -> over .)
    ROT             reduce using rule 39 (operators -> over .)
    DOT             reduce using rule 39 (operators -> over .)
    EMIT            reduce using rule 39 (operators -> over .)
    CHAR            reduce using rule 39 (operators -> over .)
    SPACES          reduce using rule 39 (operators -> over .)
    CR              reduce using rule 39 (operators -> over .)
    NUMBER          reduce using rule 39 (operators -> over .)
    DO              reduce using rule 39 (operators -> over .)
    IF              reduce using rule 39 (operators -> over .)
    ;               reduce using rule 39 (operators -> over .)


state 66

    (40) operators -> rot .

    THEN            reduce using rule 40 (operators -> rot .)
    ELSE            reduce using rule 40 (operators -> rot .)
    OPERATORS       reduce using rule 40 (operators -> rot .)
    MOD             reduce using rule 40 (operators -> rot .)
    .               reduce using rule 40 (operators -> rot .)
    ONEONE          reduce using rule 40 (operators -> rot .)
    SWAP            reduce using rule 40 (operators -> rot .)
    DROP            reduce using rule 40 (operators -> rot .)
    DUP             reduce using rule 40 (operators -> rot .)
    OVER            reduce using rule 40 (operators -> rot .)
    ROT             reduce using rule 40 (operators -> rot .)
    DOT             reduce using rule 40 (operators -> rot .)
    EMIT            reduce using rule 40 (operators -> rot .)
    CHAR            reduce using rule 40 (operators -> rot .)
    SPACES          reduce using rule 40 (operators -> rot .)
    CR              reduce using rule 40 (operators -> rot .)
    NUMBER          reduce using rule 40 (operators -> rot .)
    DO              reduce using rule 40 (operators -> rot .)
    IF              reduce using rule 40 (operators -> rot .)
    ;               reduce using rule 40 (operators -> rot .)


state 67

    (41) operators -> print .

    THEN            reduce using rule 41 (operators -> print .)
    ELSE            reduce using rule 41 (operators -> print .)
    OPERATORS       reduce using rule 41 (operators -> print .)
    MOD             reduce using rule 41 (operators -> print .)
    .               reduce using rule 41 (operators -> print .)
    ONEONE          reduce using rule 41 (operators -> print .)
    SWAP            reduce using rule 41 (operators -> print .)
    DROP            reduce using rule 41 (operators -> print .)
    DUP             reduce using rule 41 (operators -> print .)
    OVER            reduce using rule 41 (operators -> print .)
    ROT             reduce using rule 41 (operators -> print .)
    DOT             reduce using rule 41 (operators -> print .)
    EMIT            reduce using rule 41 (operators -> print .)
    CHAR            reduce using rule 41 (operators -> print .)
    SPACES          reduce using rule 41 (operators -> print .)
    CR              reduce using rule 41 (operators -> print .)
    NUMBER          reduce using rule 41 (operators -> print .)
    DO              reduce using rule 41 (operators -> print .)
    IF              reduce using rule 41 (operators -> print .)
    ;               reduce using rule 41 (operators -> print .)


state 68

    (42) operators -> number .

    THEN            reduce using rule 42 (operators -> number .)
    ELSE            reduce using rule 42 (operators -> number .)
    OPERATORS       reduce using rule 42 (operators -> number .)
    MOD             reduce using rule 42 (operators -> number .)
    .               reduce using rule 42 (operators -> number .)
    ONEONE          reduce using rule 42 (operators -> number .)
    SWAP            reduce using rule 42 (operators -> number .)
    DROP            reduce using rule 42 (operators -> number .)
    DUP             reduce using rule 42 (operators -> number .)
    OVER            reduce using rule 42 (operators -> number .)
    ROT             reduce using rule 42 (operators -> number .)
    DOT             reduce using rule 42 (operators -> number .)
    EMIT            reduce using rule 42 (operators -> number .)
    CHAR            reduce using rule 42 (operators -> number .)
    SPACES          reduce using rule 42 (operators -> number .)
    CR              reduce using rule 42 (operators -> number .)
    NUMBER          reduce using rule 42 (operators -> number .)
    DO              reduce using rule 42 (operators -> number .)
    IF              reduce using rule 42 (operators -> number .)
    ;               reduce using rule 42 (operators -> number .)


state 69

    (43) operators -> condition .

    THEN            reduce using rule 43 (operators -> condition .)
    ELSE            reduce using rule 43 (operators -> condition .)
    OPERATORS       reduce using rule 43 (operators -> condition .)
    MOD             reduce using rule 43 (operators -> condition .)
    .               reduce using rule 43 (operators -> condition .)
    ONEONE          reduce using rule 43 (operators -> condition .)
    SWAP            reduce using rule 43 (operators -> condition .)
    DROP            reduce using rule 43 (operators -> condition .)
    DUP             reduce using rule 43 (operators -> condition .)
    OVER            reduce using rule 43 (operators -> condition .)
    ROT             reduce using rule 43 (operators -> condition .)
    DOT             reduce using rule 43 (operators -> condition .)
    EMIT            reduce using rule 43 (operators -> condition .)
    CHAR            reduce using rule 43 (operators -> condition .)
    SPACES          reduce using rule 43 (operators -> condition .)
    CR              reduce using rule 43 (operators -> condition .)
    NUMBER          reduce using rule 43 (operators -> condition .)
    DO              reduce using rule 43 (operators -> condition .)
    IF              reduce using rule 43 (operators -> condition .)
    ;               reduce using rule 43 (operators -> condition .)


state 70

    (44) operators -> do .

    THEN            reduce using rule 44 (operators -> do .)
    ELSE            reduce using rule 44 (operators -> do .)
    OPERATORS       reduce using rule 44 (operators -> do .)
    MOD             reduce using rule 44 (operators -> do .)
    .               reduce using rule 44 (operators -> do .)
    ONEONE          reduce using rule 44 (operators -> do .)
    SWAP            reduce using rule 44 (operators -> do .)
    DROP            reduce using rule 44 (operators -> do .)
    DUP             reduce using rule 44 (operators -> do .)
    OVER            reduce using rule 44 (operators -> do .)
    ROT             reduce using rule 44 (operators -> do .)
    DOT             reduce using rule 44 (operators -> do .)
    EMIT            reduce using rule 44 (operators -> do .)
    CHAR            reduce using rule 44 (operators -> do .)
    SPACES          reduce using rule 44 (operators -> do .)
    CR              reduce using rule 44 (operators -> do .)
    NUMBER          reduce using rule 44 (operators -> do .)
    DO              reduce using rule 44 (operators -> do .)
    IF              reduce using rule 44 (operators -> do .)
    ;               reduce using rule 44 (operators -> do .)


state 71

    (58) Else -> ELSE . operators THEN
    (59) Else -> ELSE . THEN
    (21) operators -> . operators aritmetic
    (22) operators -> . operators dot
    (23) operators -> . operators oneOne
    (24) operators -> . operators swap
    (25) operators -> . operators drop
    (26) operators -> . operators dup
    (27) operators -> . operators over
    (28) operators -> . operators rot
    (29) operators -> . operators print
    (30) operators -> . operators number
    (31) operators -> . operators condition
    (32) operators -> . operators do
    (33) operators -> . aritmetic
    (34) operators -> . dot
    (35) operators -> . oneOne
    (36) operators -> . swap
    (37) operators -> . drop
    (38) operators -> . dup
    (39) operators -> . over
    (40) operators -> . rot
    (41) operators -> . print
    (42) operators -> . number
    (43) operators -> . condition
    (44) operators -> . do
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    THEN            shift and go to state 102
    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    IF              shift and go to state 38

    operators                      shift and go to state 101
    aritmetic                      shift and go to state 59
    dot                            shift and go to state 60
    oneOne                         shift and go to state 61
    swap                           shift and go to state 62
    drop                           shift and go to state 63
    dup                            shift and go to state 64
    over                           shift and go to state 65
    rot                            shift and go to state 66
    print                          shift and go to state 67
    number                         shift and go to state 68
    condition                      shift and go to state 69
    do                             shift and go to state 70
    If                             shift and go to state 36

state 72

    (8) function_definition -> : STRING operators . ;
    (21) operators -> operators . aritmetic
    (22) operators -> operators . dot
    (23) operators -> operators . oneOne
    (24) operators -> operators . swap
    (25) operators -> operators . drop
    (26) operators -> operators . dup
    (27) operators -> operators . over
    (28) operators -> operators . rot
    (29) operators -> operators . print
    (30) operators -> operators . number
    (31) operators -> operators . condition
    (32) operators -> operators . do
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    ;               shift and go to state 103
    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    IF              shift and go to state 38

    aritmetic                      shift and go to state 89
    dot                            shift and go to state 90
    oneOne                         shift and go to state 91
    swap                           shift and go to state 92
    drop                           shift and go to state 93
    dup                            shift and go to state 94
    over                           shift and go to state 95
    rot                            shift and go to state 96
    print                          shift and go to state 97
    number                         shift and go to state 98
    condition                      shift and go to state 99
    do                             shift and go to state 100
    If                             shift and go to state 36

state 73

    (87) do -> DO do_operators LOOP .

    STRING          reduce using rule 87 (do -> DO do_operators LOOP .)
    :               reduce using rule 87 (do -> DO do_operators LOOP .)
    OPERATORS       reduce using rule 87 (do -> DO do_operators LOOP .)
    MOD             reduce using rule 87 (do -> DO do_operators LOOP .)
    .               reduce using rule 87 (do -> DO do_operators LOOP .)
    ONEONE          reduce using rule 87 (do -> DO do_operators LOOP .)
    SWAP            reduce using rule 87 (do -> DO do_operators LOOP .)
    DROP            reduce using rule 87 (do -> DO do_operators LOOP .)
    DUP             reduce using rule 87 (do -> DO do_operators LOOP .)
    OVER            reduce using rule 87 (do -> DO do_operators LOOP .)
    ROT             reduce using rule 87 (do -> DO do_operators LOOP .)
    DOT             reduce using rule 87 (do -> DO do_operators LOOP .)
    EMIT            reduce using rule 87 (do -> DO do_operators LOOP .)
    CHAR            reduce using rule 87 (do -> DO do_operators LOOP .)
    SPACES          reduce using rule 87 (do -> DO do_operators LOOP .)
    CR              reduce using rule 87 (do -> DO do_operators LOOP .)
    NUMBER          reduce using rule 87 (do -> DO do_operators LOOP .)
    DO              reduce using rule 87 (do -> DO do_operators LOOP .)
    IF              reduce using rule 87 (do -> DO do_operators LOOP .)
    $end            reduce using rule 87 (do -> DO do_operators LOOP .)
    LOOP            reduce using rule 87 (do -> DO do_operators LOOP .)
    ITERATOR        reduce using rule 87 (do -> DO do_operators LOOP .)
    THEN            reduce using rule 87 (do -> DO do_operators LOOP .)
    ELSE            reduce using rule 87 (do -> DO do_operators LOOP .)
    ;               reduce using rule 87 (do -> DO do_operators LOOP .)


state 74

    (61) do_operators -> do_operators aritmetic .

    LOOP            reduce using rule 61 (do_operators -> do_operators aritmetic .)
    OPERATORS       reduce using rule 61 (do_operators -> do_operators aritmetic .)
    MOD             reduce using rule 61 (do_operators -> do_operators aritmetic .)
    .               reduce using rule 61 (do_operators -> do_operators aritmetic .)
    ONEONE          reduce using rule 61 (do_operators -> do_operators aritmetic .)
    SWAP            reduce using rule 61 (do_operators -> do_operators aritmetic .)
    DROP            reduce using rule 61 (do_operators -> do_operators aritmetic .)
    DUP             reduce using rule 61 (do_operators -> do_operators aritmetic .)
    OVER            reduce using rule 61 (do_operators -> do_operators aritmetic .)
    ROT             reduce using rule 61 (do_operators -> do_operators aritmetic .)
    DOT             reduce using rule 61 (do_operators -> do_operators aritmetic .)
    EMIT            reduce using rule 61 (do_operators -> do_operators aritmetic .)
    CHAR            reduce using rule 61 (do_operators -> do_operators aritmetic .)
    SPACES          reduce using rule 61 (do_operators -> do_operators aritmetic .)
    CR              reduce using rule 61 (do_operators -> do_operators aritmetic .)
    NUMBER          reduce using rule 61 (do_operators -> do_operators aritmetic .)
    DO              reduce using rule 61 (do_operators -> do_operators aritmetic .)
    ITERATOR        reduce using rule 61 (do_operators -> do_operators aritmetic .)
    IF              reduce using rule 61 (do_operators -> do_operators aritmetic .)


state 75

    (62) do_operators -> do_operators dot .

    LOOP            reduce using rule 62 (do_operators -> do_operators dot .)
    OPERATORS       reduce using rule 62 (do_operators -> do_operators dot .)
    MOD             reduce using rule 62 (do_operators -> do_operators dot .)
    .               reduce using rule 62 (do_operators -> do_operators dot .)
    ONEONE          reduce using rule 62 (do_operators -> do_operators dot .)
    SWAP            reduce using rule 62 (do_operators -> do_operators dot .)
    DROP            reduce using rule 62 (do_operators -> do_operators dot .)
    DUP             reduce using rule 62 (do_operators -> do_operators dot .)
    OVER            reduce using rule 62 (do_operators -> do_operators dot .)
    ROT             reduce using rule 62 (do_operators -> do_operators dot .)
    DOT             reduce using rule 62 (do_operators -> do_operators dot .)
    EMIT            reduce using rule 62 (do_operators -> do_operators dot .)
    CHAR            reduce using rule 62 (do_operators -> do_operators dot .)
    SPACES          reduce using rule 62 (do_operators -> do_operators dot .)
    CR              reduce using rule 62 (do_operators -> do_operators dot .)
    NUMBER          reduce using rule 62 (do_operators -> do_operators dot .)
    DO              reduce using rule 62 (do_operators -> do_operators dot .)
    ITERATOR        reduce using rule 62 (do_operators -> do_operators dot .)
    IF              reduce using rule 62 (do_operators -> do_operators dot .)


state 76

    (63) do_operators -> do_operators oneOne .

    LOOP            reduce using rule 63 (do_operators -> do_operators oneOne .)
    OPERATORS       reduce using rule 63 (do_operators -> do_operators oneOne .)
    MOD             reduce using rule 63 (do_operators -> do_operators oneOne .)
    .               reduce using rule 63 (do_operators -> do_operators oneOne .)
    ONEONE          reduce using rule 63 (do_operators -> do_operators oneOne .)
    SWAP            reduce using rule 63 (do_operators -> do_operators oneOne .)
    DROP            reduce using rule 63 (do_operators -> do_operators oneOne .)
    DUP             reduce using rule 63 (do_operators -> do_operators oneOne .)
    OVER            reduce using rule 63 (do_operators -> do_operators oneOne .)
    ROT             reduce using rule 63 (do_operators -> do_operators oneOne .)
    DOT             reduce using rule 63 (do_operators -> do_operators oneOne .)
    EMIT            reduce using rule 63 (do_operators -> do_operators oneOne .)
    CHAR            reduce using rule 63 (do_operators -> do_operators oneOne .)
    SPACES          reduce using rule 63 (do_operators -> do_operators oneOne .)
    CR              reduce using rule 63 (do_operators -> do_operators oneOne .)
    NUMBER          reduce using rule 63 (do_operators -> do_operators oneOne .)
    DO              reduce using rule 63 (do_operators -> do_operators oneOne .)
    ITERATOR        reduce using rule 63 (do_operators -> do_operators oneOne .)
    IF              reduce using rule 63 (do_operators -> do_operators oneOne .)


state 77

    (64) do_operators -> do_operators swap .

    LOOP            reduce using rule 64 (do_operators -> do_operators swap .)
    OPERATORS       reduce using rule 64 (do_operators -> do_operators swap .)
    MOD             reduce using rule 64 (do_operators -> do_operators swap .)
    .               reduce using rule 64 (do_operators -> do_operators swap .)
    ONEONE          reduce using rule 64 (do_operators -> do_operators swap .)
    SWAP            reduce using rule 64 (do_operators -> do_operators swap .)
    DROP            reduce using rule 64 (do_operators -> do_operators swap .)
    DUP             reduce using rule 64 (do_operators -> do_operators swap .)
    OVER            reduce using rule 64 (do_operators -> do_operators swap .)
    ROT             reduce using rule 64 (do_operators -> do_operators swap .)
    DOT             reduce using rule 64 (do_operators -> do_operators swap .)
    EMIT            reduce using rule 64 (do_operators -> do_operators swap .)
    CHAR            reduce using rule 64 (do_operators -> do_operators swap .)
    SPACES          reduce using rule 64 (do_operators -> do_operators swap .)
    CR              reduce using rule 64 (do_operators -> do_operators swap .)
    NUMBER          reduce using rule 64 (do_operators -> do_operators swap .)
    DO              reduce using rule 64 (do_operators -> do_operators swap .)
    ITERATOR        reduce using rule 64 (do_operators -> do_operators swap .)
    IF              reduce using rule 64 (do_operators -> do_operators swap .)


state 78

    (65) do_operators -> do_operators drop .

    LOOP            reduce using rule 65 (do_operators -> do_operators drop .)
    OPERATORS       reduce using rule 65 (do_operators -> do_operators drop .)
    MOD             reduce using rule 65 (do_operators -> do_operators drop .)
    .               reduce using rule 65 (do_operators -> do_operators drop .)
    ONEONE          reduce using rule 65 (do_operators -> do_operators drop .)
    SWAP            reduce using rule 65 (do_operators -> do_operators drop .)
    DROP            reduce using rule 65 (do_operators -> do_operators drop .)
    DUP             reduce using rule 65 (do_operators -> do_operators drop .)
    OVER            reduce using rule 65 (do_operators -> do_operators drop .)
    ROT             reduce using rule 65 (do_operators -> do_operators drop .)
    DOT             reduce using rule 65 (do_operators -> do_operators drop .)
    EMIT            reduce using rule 65 (do_operators -> do_operators drop .)
    CHAR            reduce using rule 65 (do_operators -> do_operators drop .)
    SPACES          reduce using rule 65 (do_operators -> do_operators drop .)
    CR              reduce using rule 65 (do_operators -> do_operators drop .)
    NUMBER          reduce using rule 65 (do_operators -> do_operators drop .)
    DO              reduce using rule 65 (do_operators -> do_operators drop .)
    ITERATOR        reduce using rule 65 (do_operators -> do_operators drop .)
    IF              reduce using rule 65 (do_operators -> do_operators drop .)


state 79

    (66) do_operators -> do_operators dup .

    LOOP            reduce using rule 66 (do_operators -> do_operators dup .)
    OPERATORS       reduce using rule 66 (do_operators -> do_operators dup .)
    MOD             reduce using rule 66 (do_operators -> do_operators dup .)
    .               reduce using rule 66 (do_operators -> do_operators dup .)
    ONEONE          reduce using rule 66 (do_operators -> do_operators dup .)
    SWAP            reduce using rule 66 (do_operators -> do_operators dup .)
    DROP            reduce using rule 66 (do_operators -> do_operators dup .)
    DUP             reduce using rule 66 (do_operators -> do_operators dup .)
    OVER            reduce using rule 66 (do_operators -> do_operators dup .)
    ROT             reduce using rule 66 (do_operators -> do_operators dup .)
    DOT             reduce using rule 66 (do_operators -> do_operators dup .)
    EMIT            reduce using rule 66 (do_operators -> do_operators dup .)
    CHAR            reduce using rule 66 (do_operators -> do_operators dup .)
    SPACES          reduce using rule 66 (do_operators -> do_operators dup .)
    CR              reduce using rule 66 (do_operators -> do_operators dup .)
    NUMBER          reduce using rule 66 (do_operators -> do_operators dup .)
    DO              reduce using rule 66 (do_operators -> do_operators dup .)
    ITERATOR        reduce using rule 66 (do_operators -> do_operators dup .)
    IF              reduce using rule 66 (do_operators -> do_operators dup .)


state 80

    (67) do_operators -> do_operators over .

    LOOP            reduce using rule 67 (do_operators -> do_operators over .)
    OPERATORS       reduce using rule 67 (do_operators -> do_operators over .)
    MOD             reduce using rule 67 (do_operators -> do_operators over .)
    .               reduce using rule 67 (do_operators -> do_operators over .)
    ONEONE          reduce using rule 67 (do_operators -> do_operators over .)
    SWAP            reduce using rule 67 (do_operators -> do_operators over .)
    DROP            reduce using rule 67 (do_operators -> do_operators over .)
    DUP             reduce using rule 67 (do_operators -> do_operators over .)
    OVER            reduce using rule 67 (do_operators -> do_operators over .)
    ROT             reduce using rule 67 (do_operators -> do_operators over .)
    DOT             reduce using rule 67 (do_operators -> do_operators over .)
    EMIT            reduce using rule 67 (do_operators -> do_operators over .)
    CHAR            reduce using rule 67 (do_operators -> do_operators over .)
    SPACES          reduce using rule 67 (do_operators -> do_operators over .)
    CR              reduce using rule 67 (do_operators -> do_operators over .)
    NUMBER          reduce using rule 67 (do_operators -> do_operators over .)
    DO              reduce using rule 67 (do_operators -> do_operators over .)
    ITERATOR        reduce using rule 67 (do_operators -> do_operators over .)
    IF              reduce using rule 67 (do_operators -> do_operators over .)


state 81

    (68) do_operators -> do_operators rot .

    LOOP            reduce using rule 68 (do_operators -> do_operators rot .)
    OPERATORS       reduce using rule 68 (do_operators -> do_operators rot .)
    MOD             reduce using rule 68 (do_operators -> do_operators rot .)
    .               reduce using rule 68 (do_operators -> do_operators rot .)
    ONEONE          reduce using rule 68 (do_operators -> do_operators rot .)
    SWAP            reduce using rule 68 (do_operators -> do_operators rot .)
    DROP            reduce using rule 68 (do_operators -> do_operators rot .)
    DUP             reduce using rule 68 (do_operators -> do_operators rot .)
    OVER            reduce using rule 68 (do_operators -> do_operators rot .)
    ROT             reduce using rule 68 (do_operators -> do_operators rot .)
    DOT             reduce using rule 68 (do_operators -> do_operators rot .)
    EMIT            reduce using rule 68 (do_operators -> do_operators rot .)
    CHAR            reduce using rule 68 (do_operators -> do_operators rot .)
    SPACES          reduce using rule 68 (do_operators -> do_operators rot .)
    CR              reduce using rule 68 (do_operators -> do_operators rot .)
    NUMBER          reduce using rule 68 (do_operators -> do_operators rot .)
    DO              reduce using rule 68 (do_operators -> do_operators rot .)
    ITERATOR        reduce using rule 68 (do_operators -> do_operators rot .)
    IF              reduce using rule 68 (do_operators -> do_operators rot .)


state 82

    (69) do_operators -> do_operators print .

    LOOP            reduce using rule 69 (do_operators -> do_operators print .)
    OPERATORS       reduce using rule 69 (do_operators -> do_operators print .)
    MOD             reduce using rule 69 (do_operators -> do_operators print .)
    .               reduce using rule 69 (do_operators -> do_operators print .)
    ONEONE          reduce using rule 69 (do_operators -> do_operators print .)
    SWAP            reduce using rule 69 (do_operators -> do_operators print .)
    DROP            reduce using rule 69 (do_operators -> do_operators print .)
    DUP             reduce using rule 69 (do_operators -> do_operators print .)
    OVER            reduce using rule 69 (do_operators -> do_operators print .)
    ROT             reduce using rule 69 (do_operators -> do_operators print .)
    DOT             reduce using rule 69 (do_operators -> do_operators print .)
    EMIT            reduce using rule 69 (do_operators -> do_operators print .)
    CHAR            reduce using rule 69 (do_operators -> do_operators print .)
    SPACES          reduce using rule 69 (do_operators -> do_operators print .)
    CR              reduce using rule 69 (do_operators -> do_operators print .)
    NUMBER          reduce using rule 69 (do_operators -> do_operators print .)
    DO              reduce using rule 69 (do_operators -> do_operators print .)
    ITERATOR        reduce using rule 69 (do_operators -> do_operators print .)
    IF              reduce using rule 69 (do_operators -> do_operators print .)


state 83

    (70) do_operators -> do_operators number .

    LOOP            reduce using rule 70 (do_operators -> do_operators number .)
    OPERATORS       reduce using rule 70 (do_operators -> do_operators number .)
    MOD             reduce using rule 70 (do_operators -> do_operators number .)
    .               reduce using rule 70 (do_operators -> do_operators number .)
    ONEONE          reduce using rule 70 (do_operators -> do_operators number .)
    SWAP            reduce using rule 70 (do_operators -> do_operators number .)
    DROP            reduce using rule 70 (do_operators -> do_operators number .)
    DUP             reduce using rule 70 (do_operators -> do_operators number .)
    OVER            reduce using rule 70 (do_operators -> do_operators number .)
    ROT             reduce using rule 70 (do_operators -> do_operators number .)
    DOT             reduce using rule 70 (do_operators -> do_operators number .)
    EMIT            reduce using rule 70 (do_operators -> do_operators number .)
    CHAR            reduce using rule 70 (do_operators -> do_operators number .)
    SPACES          reduce using rule 70 (do_operators -> do_operators number .)
    CR              reduce using rule 70 (do_operators -> do_operators number .)
    NUMBER          reduce using rule 70 (do_operators -> do_operators number .)
    DO              reduce using rule 70 (do_operators -> do_operators number .)
    ITERATOR        reduce using rule 70 (do_operators -> do_operators number .)
    IF              reduce using rule 70 (do_operators -> do_operators number .)


state 84

    (71) do_operators -> do_operators condition .

    LOOP            reduce using rule 71 (do_operators -> do_operators condition .)
    OPERATORS       reduce using rule 71 (do_operators -> do_operators condition .)
    MOD             reduce using rule 71 (do_operators -> do_operators condition .)
    .               reduce using rule 71 (do_operators -> do_operators condition .)
    ONEONE          reduce using rule 71 (do_operators -> do_operators condition .)
    SWAP            reduce using rule 71 (do_operators -> do_operators condition .)
    DROP            reduce using rule 71 (do_operators -> do_operators condition .)
    DUP             reduce using rule 71 (do_operators -> do_operators condition .)
    OVER            reduce using rule 71 (do_operators -> do_operators condition .)
    ROT             reduce using rule 71 (do_operators -> do_operators condition .)
    DOT             reduce using rule 71 (do_operators -> do_operators condition .)
    EMIT            reduce using rule 71 (do_operators -> do_operators condition .)
    CHAR            reduce using rule 71 (do_operators -> do_operators condition .)
    SPACES          reduce using rule 71 (do_operators -> do_operators condition .)
    CR              reduce using rule 71 (do_operators -> do_operators condition .)
    NUMBER          reduce using rule 71 (do_operators -> do_operators condition .)
    DO              reduce using rule 71 (do_operators -> do_operators condition .)
    ITERATOR        reduce using rule 71 (do_operators -> do_operators condition .)
    IF              reduce using rule 71 (do_operators -> do_operators condition .)


state 85

    (72) do_operators -> do_operators do .

    LOOP            reduce using rule 72 (do_operators -> do_operators do .)
    OPERATORS       reduce using rule 72 (do_operators -> do_operators do .)
    MOD             reduce using rule 72 (do_operators -> do_operators do .)
    .               reduce using rule 72 (do_operators -> do_operators do .)
    ONEONE          reduce using rule 72 (do_operators -> do_operators do .)
    SWAP            reduce using rule 72 (do_operators -> do_operators do .)
    DROP            reduce using rule 72 (do_operators -> do_operators do .)
    DUP             reduce using rule 72 (do_operators -> do_operators do .)
    OVER            reduce using rule 72 (do_operators -> do_operators do .)
    ROT             reduce using rule 72 (do_operators -> do_operators do .)
    DOT             reduce using rule 72 (do_operators -> do_operators do .)
    EMIT            reduce using rule 72 (do_operators -> do_operators do .)
    CHAR            reduce using rule 72 (do_operators -> do_operators do .)
    SPACES          reduce using rule 72 (do_operators -> do_operators do .)
    CR              reduce using rule 72 (do_operators -> do_operators do .)
    NUMBER          reduce using rule 72 (do_operators -> do_operators do .)
    DO              reduce using rule 72 (do_operators -> do_operators do .)
    ITERATOR        reduce using rule 72 (do_operators -> do_operators do .)
    IF              reduce using rule 72 (do_operators -> do_operators do .)


state 86

    (73) do_operators -> do_operators Iterator .

    LOOP            reduce using rule 73 (do_operators -> do_operators Iterator .)
    OPERATORS       reduce using rule 73 (do_operators -> do_operators Iterator .)
    MOD             reduce using rule 73 (do_operators -> do_operators Iterator .)
    .               reduce using rule 73 (do_operators -> do_operators Iterator .)
    ONEONE          reduce using rule 73 (do_operators -> do_operators Iterator .)
    SWAP            reduce using rule 73 (do_operators -> do_operators Iterator .)
    DROP            reduce using rule 73 (do_operators -> do_operators Iterator .)
    DUP             reduce using rule 73 (do_operators -> do_operators Iterator .)
    OVER            reduce using rule 73 (do_operators -> do_operators Iterator .)
    ROT             reduce using rule 73 (do_operators -> do_operators Iterator .)
    DOT             reduce using rule 73 (do_operators -> do_operators Iterator .)
    EMIT            reduce using rule 73 (do_operators -> do_operators Iterator .)
    CHAR            reduce using rule 73 (do_operators -> do_operators Iterator .)
    SPACES          reduce using rule 73 (do_operators -> do_operators Iterator .)
    CR              reduce using rule 73 (do_operators -> do_operators Iterator .)
    NUMBER          reduce using rule 73 (do_operators -> do_operators Iterator .)
    DO              reduce using rule 73 (do_operators -> do_operators Iterator .)
    ITERATOR        reduce using rule 73 (do_operators -> do_operators Iterator .)
    IF              reduce using rule 73 (do_operators -> do_operators Iterator .)


state 87

    (54) If -> IF operators Else .

    STRING          reduce using rule 54 (If -> IF operators Else .)
    :               reduce using rule 54 (If -> IF operators Else .)
    OPERATORS       reduce using rule 54 (If -> IF operators Else .)
    MOD             reduce using rule 54 (If -> IF operators Else .)
    .               reduce using rule 54 (If -> IF operators Else .)
    ONEONE          reduce using rule 54 (If -> IF operators Else .)
    SWAP            reduce using rule 54 (If -> IF operators Else .)
    DROP            reduce using rule 54 (If -> IF operators Else .)
    DUP             reduce using rule 54 (If -> IF operators Else .)
    OVER            reduce using rule 54 (If -> IF operators Else .)
    ROT             reduce using rule 54 (If -> IF operators Else .)
    DOT             reduce using rule 54 (If -> IF operators Else .)
    EMIT            reduce using rule 54 (If -> IF operators Else .)
    CHAR            reduce using rule 54 (If -> IF operators Else .)
    SPACES          reduce using rule 54 (If -> IF operators Else .)
    CR              reduce using rule 54 (If -> IF operators Else .)
    NUMBER          reduce using rule 54 (If -> IF operators Else .)
    DO              reduce using rule 54 (If -> IF operators Else .)
    IF              reduce using rule 54 (If -> IF operators Else .)
    $end            reduce using rule 54 (If -> IF operators Else .)
    LOOP            reduce using rule 54 (If -> IF operators Else .)
    ITERATOR        reduce using rule 54 (If -> IF operators Else .)
    THEN            reduce using rule 54 (If -> IF operators Else .)
    ELSE            reduce using rule 54 (If -> IF operators Else .)
    ;               reduce using rule 54 (If -> IF operators Else .)


state 88

    (56) If -> IF operators THEN .

    STRING          reduce using rule 56 (If -> IF operators THEN .)
    :               reduce using rule 56 (If -> IF operators THEN .)
    OPERATORS       reduce using rule 56 (If -> IF operators THEN .)
    MOD             reduce using rule 56 (If -> IF operators THEN .)
    .               reduce using rule 56 (If -> IF operators THEN .)
    ONEONE          reduce using rule 56 (If -> IF operators THEN .)
    SWAP            reduce using rule 56 (If -> IF operators THEN .)
    DROP            reduce using rule 56 (If -> IF operators THEN .)
    DUP             reduce using rule 56 (If -> IF operators THEN .)
    OVER            reduce using rule 56 (If -> IF operators THEN .)
    ROT             reduce using rule 56 (If -> IF operators THEN .)
    DOT             reduce using rule 56 (If -> IF operators THEN .)
    EMIT            reduce using rule 56 (If -> IF operators THEN .)
    CHAR            reduce using rule 56 (If -> IF operators THEN .)
    SPACES          reduce using rule 56 (If -> IF operators THEN .)
    CR              reduce using rule 56 (If -> IF operators THEN .)
    NUMBER          reduce using rule 56 (If -> IF operators THEN .)
    DO              reduce using rule 56 (If -> IF operators THEN .)
    IF              reduce using rule 56 (If -> IF operators THEN .)
    $end            reduce using rule 56 (If -> IF operators THEN .)
    LOOP            reduce using rule 56 (If -> IF operators THEN .)
    ITERATOR        reduce using rule 56 (If -> IF operators THEN .)
    THEN            reduce using rule 56 (If -> IF operators THEN .)
    ELSE            reduce using rule 56 (If -> IF operators THEN .)
    ;               reduce using rule 56 (If -> IF operators THEN .)


state 89

    (21) operators -> operators aritmetic .

    THEN            reduce using rule 21 (operators -> operators aritmetic .)
    ELSE            reduce using rule 21 (operators -> operators aritmetic .)
    OPERATORS       reduce using rule 21 (operators -> operators aritmetic .)
    MOD             reduce using rule 21 (operators -> operators aritmetic .)
    .               reduce using rule 21 (operators -> operators aritmetic .)
    ONEONE          reduce using rule 21 (operators -> operators aritmetic .)
    SWAP            reduce using rule 21 (operators -> operators aritmetic .)
    DROP            reduce using rule 21 (operators -> operators aritmetic .)
    DUP             reduce using rule 21 (operators -> operators aritmetic .)
    OVER            reduce using rule 21 (operators -> operators aritmetic .)
    ROT             reduce using rule 21 (operators -> operators aritmetic .)
    DOT             reduce using rule 21 (operators -> operators aritmetic .)
    EMIT            reduce using rule 21 (operators -> operators aritmetic .)
    CHAR            reduce using rule 21 (operators -> operators aritmetic .)
    SPACES          reduce using rule 21 (operators -> operators aritmetic .)
    CR              reduce using rule 21 (operators -> operators aritmetic .)
    NUMBER          reduce using rule 21 (operators -> operators aritmetic .)
    DO              reduce using rule 21 (operators -> operators aritmetic .)
    IF              reduce using rule 21 (operators -> operators aritmetic .)
    ;               reduce using rule 21 (operators -> operators aritmetic .)


state 90

    (22) operators -> operators dot .

    THEN            reduce using rule 22 (operators -> operators dot .)
    ELSE            reduce using rule 22 (operators -> operators dot .)
    OPERATORS       reduce using rule 22 (operators -> operators dot .)
    MOD             reduce using rule 22 (operators -> operators dot .)
    .               reduce using rule 22 (operators -> operators dot .)
    ONEONE          reduce using rule 22 (operators -> operators dot .)
    SWAP            reduce using rule 22 (operators -> operators dot .)
    DROP            reduce using rule 22 (operators -> operators dot .)
    DUP             reduce using rule 22 (operators -> operators dot .)
    OVER            reduce using rule 22 (operators -> operators dot .)
    ROT             reduce using rule 22 (operators -> operators dot .)
    DOT             reduce using rule 22 (operators -> operators dot .)
    EMIT            reduce using rule 22 (operators -> operators dot .)
    CHAR            reduce using rule 22 (operators -> operators dot .)
    SPACES          reduce using rule 22 (operators -> operators dot .)
    CR              reduce using rule 22 (operators -> operators dot .)
    NUMBER          reduce using rule 22 (operators -> operators dot .)
    DO              reduce using rule 22 (operators -> operators dot .)
    IF              reduce using rule 22 (operators -> operators dot .)
    ;               reduce using rule 22 (operators -> operators dot .)


state 91

    (23) operators -> operators oneOne .

    THEN            reduce using rule 23 (operators -> operators oneOne .)
    ELSE            reduce using rule 23 (operators -> operators oneOne .)
    OPERATORS       reduce using rule 23 (operators -> operators oneOne .)
    MOD             reduce using rule 23 (operators -> operators oneOne .)
    .               reduce using rule 23 (operators -> operators oneOne .)
    ONEONE          reduce using rule 23 (operators -> operators oneOne .)
    SWAP            reduce using rule 23 (operators -> operators oneOne .)
    DROP            reduce using rule 23 (operators -> operators oneOne .)
    DUP             reduce using rule 23 (operators -> operators oneOne .)
    OVER            reduce using rule 23 (operators -> operators oneOne .)
    ROT             reduce using rule 23 (operators -> operators oneOne .)
    DOT             reduce using rule 23 (operators -> operators oneOne .)
    EMIT            reduce using rule 23 (operators -> operators oneOne .)
    CHAR            reduce using rule 23 (operators -> operators oneOne .)
    SPACES          reduce using rule 23 (operators -> operators oneOne .)
    CR              reduce using rule 23 (operators -> operators oneOne .)
    NUMBER          reduce using rule 23 (operators -> operators oneOne .)
    DO              reduce using rule 23 (operators -> operators oneOne .)
    IF              reduce using rule 23 (operators -> operators oneOne .)
    ;               reduce using rule 23 (operators -> operators oneOne .)


state 92

    (24) operators -> operators swap .

    THEN            reduce using rule 24 (operators -> operators swap .)
    ELSE            reduce using rule 24 (operators -> operators swap .)
    OPERATORS       reduce using rule 24 (operators -> operators swap .)
    MOD             reduce using rule 24 (operators -> operators swap .)
    .               reduce using rule 24 (operators -> operators swap .)
    ONEONE          reduce using rule 24 (operators -> operators swap .)
    SWAP            reduce using rule 24 (operators -> operators swap .)
    DROP            reduce using rule 24 (operators -> operators swap .)
    DUP             reduce using rule 24 (operators -> operators swap .)
    OVER            reduce using rule 24 (operators -> operators swap .)
    ROT             reduce using rule 24 (operators -> operators swap .)
    DOT             reduce using rule 24 (operators -> operators swap .)
    EMIT            reduce using rule 24 (operators -> operators swap .)
    CHAR            reduce using rule 24 (operators -> operators swap .)
    SPACES          reduce using rule 24 (operators -> operators swap .)
    CR              reduce using rule 24 (operators -> operators swap .)
    NUMBER          reduce using rule 24 (operators -> operators swap .)
    DO              reduce using rule 24 (operators -> operators swap .)
    IF              reduce using rule 24 (operators -> operators swap .)
    ;               reduce using rule 24 (operators -> operators swap .)


state 93

    (25) operators -> operators drop .

    THEN            reduce using rule 25 (operators -> operators drop .)
    ELSE            reduce using rule 25 (operators -> operators drop .)
    OPERATORS       reduce using rule 25 (operators -> operators drop .)
    MOD             reduce using rule 25 (operators -> operators drop .)
    .               reduce using rule 25 (operators -> operators drop .)
    ONEONE          reduce using rule 25 (operators -> operators drop .)
    SWAP            reduce using rule 25 (operators -> operators drop .)
    DROP            reduce using rule 25 (operators -> operators drop .)
    DUP             reduce using rule 25 (operators -> operators drop .)
    OVER            reduce using rule 25 (operators -> operators drop .)
    ROT             reduce using rule 25 (operators -> operators drop .)
    DOT             reduce using rule 25 (operators -> operators drop .)
    EMIT            reduce using rule 25 (operators -> operators drop .)
    CHAR            reduce using rule 25 (operators -> operators drop .)
    SPACES          reduce using rule 25 (operators -> operators drop .)
    CR              reduce using rule 25 (operators -> operators drop .)
    NUMBER          reduce using rule 25 (operators -> operators drop .)
    DO              reduce using rule 25 (operators -> operators drop .)
    IF              reduce using rule 25 (operators -> operators drop .)
    ;               reduce using rule 25 (operators -> operators drop .)


state 94

    (26) operators -> operators dup .

    THEN            reduce using rule 26 (operators -> operators dup .)
    ELSE            reduce using rule 26 (operators -> operators dup .)
    OPERATORS       reduce using rule 26 (operators -> operators dup .)
    MOD             reduce using rule 26 (operators -> operators dup .)
    .               reduce using rule 26 (operators -> operators dup .)
    ONEONE          reduce using rule 26 (operators -> operators dup .)
    SWAP            reduce using rule 26 (operators -> operators dup .)
    DROP            reduce using rule 26 (operators -> operators dup .)
    DUP             reduce using rule 26 (operators -> operators dup .)
    OVER            reduce using rule 26 (operators -> operators dup .)
    ROT             reduce using rule 26 (operators -> operators dup .)
    DOT             reduce using rule 26 (operators -> operators dup .)
    EMIT            reduce using rule 26 (operators -> operators dup .)
    CHAR            reduce using rule 26 (operators -> operators dup .)
    SPACES          reduce using rule 26 (operators -> operators dup .)
    CR              reduce using rule 26 (operators -> operators dup .)
    NUMBER          reduce using rule 26 (operators -> operators dup .)
    DO              reduce using rule 26 (operators -> operators dup .)
    IF              reduce using rule 26 (operators -> operators dup .)
    ;               reduce using rule 26 (operators -> operators dup .)


state 95

    (27) operators -> operators over .

    THEN            reduce using rule 27 (operators -> operators over .)
    ELSE            reduce using rule 27 (operators -> operators over .)
    OPERATORS       reduce using rule 27 (operators -> operators over .)
    MOD             reduce using rule 27 (operators -> operators over .)
    .               reduce using rule 27 (operators -> operators over .)
    ONEONE          reduce using rule 27 (operators -> operators over .)
    SWAP            reduce using rule 27 (operators -> operators over .)
    DROP            reduce using rule 27 (operators -> operators over .)
    DUP             reduce using rule 27 (operators -> operators over .)
    OVER            reduce using rule 27 (operators -> operators over .)
    ROT             reduce using rule 27 (operators -> operators over .)
    DOT             reduce using rule 27 (operators -> operators over .)
    EMIT            reduce using rule 27 (operators -> operators over .)
    CHAR            reduce using rule 27 (operators -> operators over .)
    SPACES          reduce using rule 27 (operators -> operators over .)
    CR              reduce using rule 27 (operators -> operators over .)
    NUMBER          reduce using rule 27 (operators -> operators over .)
    DO              reduce using rule 27 (operators -> operators over .)
    IF              reduce using rule 27 (operators -> operators over .)
    ;               reduce using rule 27 (operators -> operators over .)


state 96

    (28) operators -> operators rot .

    THEN            reduce using rule 28 (operators -> operators rot .)
    ELSE            reduce using rule 28 (operators -> operators rot .)
    OPERATORS       reduce using rule 28 (operators -> operators rot .)
    MOD             reduce using rule 28 (operators -> operators rot .)
    .               reduce using rule 28 (operators -> operators rot .)
    ONEONE          reduce using rule 28 (operators -> operators rot .)
    SWAP            reduce using rule 28 (operators -> operators rot .)
    DROP            reduce using rule 28 (operators -> operators rot .)
    DUP             reduce using rule 28 (operators -> operators rot .)
    OVER            reduce using rule 28 (operators -> operators rot .)
    ROT             reduce using rule 28 (operators -> operators rot .)
    DOT             reduce using rule 28 (operators -> operators rot .)
    EMIT            reduce using rule 28 (operators -> operators rot .)
    CHAR            reduce using rule 28 (operators -> operators rot .)
    SPACES          reduce using rule 28 (operators -> operators rot .)
    CR              reduce using rule 28 (operators -> operators rot .)
    NUMBER          reduce using rule 28 (operators -> operators rot .)
    DO              reduce using rule 28 (operators -> operators rot .)
    IF              reduce using rule 28 (operators -> operators rot .)
    ;               reduce using rule 28 (operators -> operators rot .)


state 97

    (29) operators -> operators print .

    THEN            reduce using rule 29 (operators -> operators print .)
    ELSE            reduce using rule 29 (operators -> operators print .)
    OPERATORS       reduce using rule 29 (operators -> operators print .)
    MOD             reduce using rule 29 (operators -> operators print .)
    .               reduce using rule 29 (operators -> operators print .)
    ONEONE          reduce using rule 29 (operators -> operators print .)
    SWAP            reduce using rule 29 (operators -> operators print .)
    DROP            reduce using rule 29 (operators -> operators print .)
    DUP             reduce using rule 29 (operators -> operators print .)
    OVER            reduce using rule 29 (operators -> operators print .)
    ROT             reduce using rule 29 (operators -> operators print .)
    DOT             reduce using rule 29 (operators -> operators print .)
    EMIT            reduce using rule 29 (operators -> operators print .)
    CHAR            reduce using rule 29 (operators -> operators print .)
    SPACES          reduce using rule 29 (operators -> operators print .)
    CR              reduce using rule 29 (operators -> operators print .)
    NUMBER          reduce using rule 29 (operators -> operators print .)
    DO              reduce using rule 29 (operators -> operators print .)
    IF              reduce using rule 29 (operators -> operators print .)
    ;               reduce using rule 29 (operators -> operators print .)


state 98

    (30) operators -> operators number .

    THEN            reduce using rule 30 (operators -> operators number .)
    ELSE            reduce using rule 30 (operators -> operators number .)
    OPERATORS       reduce using rule 30 (operators -> operators number .)
    MOD             reduce using rule 30 (operators -> operators number .)
    .               reduce using rule 30 (operators -> operators number .)
    ONEONE          reduce using rule 30 (operators -> operators number .)
    SWAP            reduce using rule 30 (operators -> operators number .)
    DROP            reduce using rule 30 (operators -> operators number .)
    DUP             reduce using rule 30 (operators -> operators number .)
    OVER            reduce using rule 30 (operators -> operators number .)
    ROT             reduce using rule 30 (operators -> operators number .)
    DOT             reduce using rule 30 (operators -> operators number .)
    EMIT            reduce using rule 30 (operators -> operators number .)
    CHAR            reduce using rule 30 (operators -> operators number .)
    SPACES          reduce using rule 30 (operators -> operators number .)
    CR              reduce using rule 30 (operators -> operators number .)
    NUMBER          reduce using rule 30 (operators -> operators number .)
    DO              reduce using rule 30 (operators -> operators number .)
    IF              reduce using rule 30 (operators -> operators number .)
    ;               reduce using rule 30 (operators -> operators number .)


state 99

    (31) operators -> operators condition .

    THEN            reduce using rule 31 (operators -> operators condition .)
    ELSE            reduce using rule 31 (operators -> operators condition .)
    OPERATORS       reduce using rule 31 (operators -> operators condition .)
    MOD             reduce using rule 31 (operators -> operators condition .)
    .               reduce using rule 31 (operators -> operators condition .)
    ONEONE          reduce using rule 31 (operators -> operators condition .)
    SWAP            reduce using rule 31 (operators -> operators condition .)
    DROP            reduce using rule 31 (operators -> operators condition .)
    DUP             reduce using rule 31 (operators -> operators condition .)
    OVER            reduce using rule 31 (operators -> operators condition .)
    ROT             reduce using rule 31 (operators -> operators condition .)
    DOT             reduce using rule 31 (operators -> operators condition .)
    EMIT            reduce using rule 31 (operators -> operators condition .)
    CHAR            reduce using rule 31 (operators -> operators condition .)
    SPACES          reduce using rule 31 (operators -> operators condition .)
    CR              reduce using rule 31 (operators -> operators condition .)
    NUMBER          reduce using rule 31 (operators -> operators condition .)
    DO              reduce using rule 31 (operators -> operators condition .)
    IF              reduce using rule 31 (operators -> operators condition .)
    ;               reduce using rule 31 (operators -> operators condition .)


state 100

    (32) operators -> operators do .

    THEN            reduce using rule 32 (operators -> operators do .)
    ELSE            reduce using rule 32 (operators -> operators do .)
    OPERATORS       reduce using rule 32 (operators -> operators do .)
    MOD             reduce using rule 32 (operators -> operators do .)
    .               reduce using rule 32 (operators -> operators do .)
    ONEONE          reduce using rule 32 (operators -> operators do .)
    SWAP            reduce using rule 32 (operators -> operators do .)
    DROP            reduce using rule 32 (operators -> operators do .)
    DUP             reduce using rule 32 (operators -> operators do .)
    OVER            reduce using rule 32 (operators -> operators do .)
    ROT             reduce using rule 32 (operators -> operators do .)
    DOT             reduce using rule 32 (operators -> operators do .)
    EMIT            reduce using rule 32 (operators -> operators do .)
    CHAR            reduce using rule 32 (operators -> operators do .)
    SPACES          reduce using rule 32 (operators -> operators do .)
    CR              reduce using rule 32 (operators -> operators do .)
    NUMBER          reduce using rule 32 (operators -> operators do .)
    DO              reduce using rule 32 (operators -> operators do .)
    IF              reduce using rule 32 (operators -> operators do .)
    ;               reduce using rule 32 (operators -> operators do .)


state 101

    (58) Else -> ELSE operators . THEN
    (21) operators -> operators . aritmetic
    (22) operators -> operators . dot
    (23) operators -> operators . oneOne
    (24) operators -> operators . swap
    (25) operators -> operators . drop
    (26) operators -> operators . dup
    (27) operators -> operators . over
    (28) operators -> operators . rot
    (29) operators -> operators . print
    (30) operators -> operators . number
    (31) operators -> operators . condition
    (32) operators -> operators . do
    (45) aritmetic -> . OPERATORS
    (46) aritmetic -> . MOD
    (93) dot -> . .
    (88) oneOne -> . ONEONE
    (91) swap -> . SWAP
    (89) drop -> . DROP
    (52) dup -> . DUP
    (92) over -> . OVER
    (90) rot -> . ROT
    (47) print -> . DOT
    (48) print -> . EMIT
    (49) print -> . CHAR
    (50) print -> . SPACES
    (51) print -> . CR
    (94) number -> . NUMBER
    (53) condition -> . If
    (87) do -> . DO do_operators LOOP
    (54) If -> . IF operators Else
    (55) If -> . IF Else
    (56) If -> . IF operators THEN
    (57) If -> . IF THEN

    THEN            shift and go to state 104
    OPERATORS       shift and go to state 21
    MOD             shift and go to state 22
    .               shift and go to state 23
    ONEONE          shift and go to state 24
    SWAP            shift and go to state 25
    DROP            shift and go to state 26
    DUP             shift and go to state 27
    OVER            shift and go to state 28
    ROT             shift and go to state 29
    DOT             shift and go to state 30
    EMIT            shift and go to state 31
    CHAR            shift and go to state 32
    SPACES          shift and go to state 33
    CR              shift and go to state 34
    NUMBER          shift and go to state 35
    DO              shift and go to state 37
    IF              shift and go to state 38

    aritmetic                      shift and go to state 89
    dot                            shift and go to state 90
    oneOne                         shift and go to state 91
    swap                           shift and go to state 92
    drop                           shift and go to state 93
    dup                            shift and go to state 94
    over                           shift and go to state 95
    rot                            shift and go to state 96
    print                          shift and go to state 97
    number                         shift and go to state 98
    condition                      shift and go to state 99
    do                             shift and go to state 100
    If                             shift and go to state 36

state 102

    (59) Else -> ELSE THEN .

    STRING          reduce using rule 59 (Else -> ELSE THEN .)
    :               reduce using rule 59 (Else -> ELSE THEN .)
    OPERATORS       reduce using rule 59 (Else -> ELSE THEN .)
    MOD             reduce using rule 59 (Else -> ELSE THEN .)
    .               reduce using rule 59 (Else -> ELSE THEN .)
    ONEONE          reduce using rule 59 (Else -> ELSE THEN .)
    SWAP            reduce using rule 59 (Else -> ELSE THEN .)
    DROP            reduce using rule 59 (Else -> ELSE THEN .)
    DUP             reduce using rule 59 (Else -> ELSE THEN .)
    OVER            reduce using rule 59 (Else -> ELSE THEN .)
    ROT             reduce using rule 59 (Else -> ELSE THEN .)
    DOT             reduce using rule 59 (Else -> ELSE THEN .)
    EMIT            reduce using rule 59 (Else -> ELSE THEN .)
    CHAR            reduce using rule 59 (Else -> ELSE THEN .)
    SPACES          reduce using rule 59 (Else -> ELSE THEN .)
    CR              reduce using rule 59 (Else -> ELSE THEN .)
    NUMBER          reduce using rule 59 (Else -> ELSE THEN .)
    DO              reduce using rule 59 (Else -> ELSE THEN .)
    IF              reduce using rule 59 (Else -> ELSE THEN .)
    $end            reduce using rule 59 (Else -> ELSE THEN .)
    LOOP            reduce using rule 59 (Else -> ELSE THEN .)
    ITERATOR        reduce using rule 59 (Else -> ELSE THEN .)
    THEN            reduce using rule 59 (Else -> ELSE THEN .)
    ELSE            reduce using rule 59 (Else -> ELSE THEN .)
    ;               reduce using rule 59 (Else -> ELSE THEN .)


state 103

    (8) function_definition -> : STRING operators ; .

    STRING          reduce using rule 8 (function_definition -> : STRING operators ; .)
    :               reduce using rule 8 (function_definition -> : STRING operators ; .)
    OPERATORS       reduce using rule 8 (function_definition -> : STRING operators ; .)
    MOD             reduce using rule 8 (function_definition -> : STRING operators ; .)
    .               reduce using rule 8 (function_definition -> : STRING operators ; .)
    ONEONE          reduce using rule 8 (function_definition -> : STRING operators ; .)
    SWAP            reduce using rule 8 (function_definition -> : STRING operators ; .)
    DROP            reduce using rule 8 (function_definition -> : STRING operators ; .)
    DUP             reduce using rule 8 (function_definition -> : STRING operators ; .)
    OVER            reduce using rule 8 (function_definition -> : STRING operators ; .)
    ROT             reduce using rule 8 (function_definition -> : STRING operators ; .)
    DOT             reduce using rule 8 (function_definition -> : STRING operators ; .)
    EMIT            reduce using rule 8 (function_definition -> : STRING operators ; .)
    CHAR            reduce using rule 8 (function_definition -> : STRING operators ; .)
    SPACES          reduce using rule 8 (function_definition -> : STRING operators ; .)
    CR              reduce using rule 8 (function_definition -> : STRING operators ; .)
    NUMBER          reduce using rule 8 (function_definition -> : STRING operators ; .)
    DO              reduce using rule 8 (function_definition -> : STRING operators ; .)
    IF              reduce using rule 8 (function_definition -> : STRING operators ; .)
    $end            reduce using rule 8 (function_definition -> : STRING operators ; .)


state 104

    (58) Else -> ELSE operators THEN .

    STRING          reduce using rule 58 (Else -> ELSE operators THEN .)
    :               reduce using rule 58 (Else -> ELSE operators THEN .)
    OPERATORS       reduce using rule 58 (Else -> ELSE operators THEN .)
    MOD             reduce using rule 58 (Else -> ELSE operators THEN .)
    .               reduce using rule 58 (Else -> ELSE operators THEN .)
    ONEONE          reduce using rule 58 (Else -> ELSE operators THEN .)
    SWAP            reduce using rule 58 (Else -> ELSE operators THEN .)
    DROP            reduce using rule 58 (Else -> ELSE operators THEN .)
    DUP             reduce using rule 58 (Else -> ELSE operators THEN .)
    OVER            reduce using rule 58 (Else -> ELSE operators THEN .)
    ROT             reduce using rule 58 (Else -> ELSE operators THEN .)
    DOT             reduce using rule 58 (Else -> ELSE operators THEN .)
    EMIT            reduce using rule 58 (Else -> ELSE operators THEN .)
    CHAR            reduce using rule 58 (Else -> ELSE operators THEN .)
    SPACES          reduce using rule 58 (Else -> ELSE operators THEN .)
    CR              reduce using rule 58 (Else -> ELSE operators THEN .)
    NUMBER          reduce using rule 58 (Else -> ELSE operators THEN .)
    DO              reduce using rule 58 (Else -> ELSE operators THEN .)
    IF              reduce using rule 58 (Else -> ELSE operators THEN .)
    $end            reduce using rule 58 (Else -> ELSE operators THEN .)
    LOOP            reduce using rule 58 (Else -> ELSE operators THEN .)
    ITERATOR        reduce using rule 58 (Else -> ELSE operators THEN .)
    THEN            reduce using rule 58 (Else -> ELSE operators THEN .)
    ELSE            reduce using rule 58 (Else -> ELSE operators THEN .)
    ;               reduce using rule 58 (Else -> ELSE operators THEN .)

